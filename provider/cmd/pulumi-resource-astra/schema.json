{
    "name": "astra",
    "displayName": "Astra",
    "description": "A Pulumi package for creating and managing astra cloud resources.",
    "keywords": [
        "pulumi",
        "astra",
        "category/cloud",
        "datastax"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`astra` Terraform Provider](https://github.com/datastax/terraform-provider-astra).",
    "repository": "https://github.com/pulumiverse/pulumi-astra",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumiverse/pulumi-astra/sdk/go/astra"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing astra cloud resources.",
            "packageName": "@pulumiverse/astra",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/datastax/terraform-provider-astra)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-astra` repo](https://github.com/pulumi/pulumi-astra/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`datastax/terraform-provider-astra` repo](https://github.com/datastax/terraform-provider-astra/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumiverse_astra",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/datastax/terraform-provider-astra)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-astra` repo](https://github.com/pulumi/pulumi-astra/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`datastax/terraform-provider-astra` repo](https://github.com/datastax/terraform-provider-astra/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "token": {
                "type": "string",
                "description": "Authentication token for Astra API.\n"
            }
        }
    },
    "types": {
        "astra:index/AccessListAddress:AccessListAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "enabled"
            ]
        },
        "astra:index/getAccessListAddress:getAccessListAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astra:index/getAstraDatabasesResult:getAstraDatabasesResult": {
            "properties": {
                "additionalKeyspaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cqlshUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataEndpointUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grafanaUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "graphqlUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyspace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationFactor": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalStorage": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalKeyspaces",
                "cloudProvider",
                "cqlshUrl",
                "dataEndpointUrl",
                "datacenters",
                "grafanaUrl",
                "graphqlUrl",
                "id",
                "keyspace",
                "name",
                "nodeCount",
                "organizationId",
                "ownerId",
                "regions",
                "replicationFactor",
                "status",
                "totalStorage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astra:index/getAvailableRegionsResult:getAvailableRegionsResult": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "displayName",
                "region",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astra:index/getKeyspacesResult:getKeyspacesResult": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astra:index/getPrivateLinkEndpointsResult:getPrivateLinkEndpointsResult": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "description",
                "endpointId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "astra:index/getPrivateLinksResult:getPrivateLinksResult": {
            "properties": {
                "allowedPrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedPrincipals",
                "datacenterId",
                "endpoints",
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the astra package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "token": {
                "type": "string",
                "description": "Authentication token for Astra API.\n"
            }
        },
        "inputProperties": {
            "token": {
                "type": "string",
                "description": "Authentication token for Astra API.\n"
            }
        }
    },
    "resources": {
        "astra:index/accessList:AccessList": {
            "description": "`astra.AccessList` resource represents a database access list, used to limit the ip's / CIDR groups that have access to a database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst example = new astra.AccessList(\"example\", {\n    addresses: [\n        {\n            address: \"0.0.0.1/0\",\n            enabled: true,\n        },\n        {\n            address: \"0.0.0.2/0\",\n            enabled: true,\n        },\n        {\n            address: \"0.0.0.3/0\",\n            enabled: true,\n        },\n    ],\n    databaseId: \"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nexample = astra.AccessList(\"example\",\n    addresses=[\n        astra.AccessListAddressArgs(\n            address=\"0.0.0.1/0\",\n            enabled=True,\n        ),\n        astra.AccessListAddressArgs(\n            address=\"0.0.0.2/0\",\n            enabled=True,\n        ),\n        astra.AccessListAddressArgs(\n            address=\"0.0.0.3/0\",\n            enabled=True,\n        ),\n    ],\n    database_id=\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Astra.AccessList(\"example\", new Astra.AccessListArgs\n        {\n            Addresses = \n            {\n                new Astra.Inputs.AccessListAddressArgs\n                {\n                    Address = \"0.0.0.1/0\",\n                    Enabled = true,\n                },\n                new Astra.Inputs.AccessListAddressArgs\n                {\n                    Address = \"0.0.0.2/0\",\n                    Enabled = true,\n                },\n                new Astra.Inputs.AccessListAddressArgs\n                {\n                    Address = \"0.0.0.3/0\",\n                    Enabled = true,\n                },\n            },\n            DatabaseId = \"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewAccessList(ctx, \"example\", \u0026astra.AccessListArgs{\n\t\t\tAddresses: AccessListAddressArray{\n\t\t\t\t\u0026AccessListAddressArgs{\n\t\t\t\t\tAddress: pulumi.String(\"0.0.0.1/0\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026AccessListAddressArgs{\n\t\t\t\t\tAddress: pulumi.String(\"0.0.0.2/0\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026AccessListAddressArgs{\n\t\t\t\t\tAddress: pulumi.String(\"0.0.0.3/0\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDatabaseId: pulumi.String(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\"),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AccessList;\nimport com.pulumi.astra.AccessListArgs;\nimport com.pulumi.astra.inputs.AccessListAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AccessList(\"example\", AccessListArgs.builder()        \n            .addresses(            \n                AccessListAddressArgs.builder()\n                    .address(\"0.0.0.1/0\")\n                    .enabled(true)\n                    .build(),\n                AccessListAddressArgs.builder()\n                    .address(\"0.0.0.2/0\")\n                    .enabled(true)\n                    .build(),\n                AccessListAddressArgs.builder()\n                    .address(\"0.0.0.3/0\")\n                    .enabled(true)\n                    .build())\n            .databaseId(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astra:AccessList\n    properties:\n      addresses:\n        - address: 0.0.0.1/0\n          enabled: true\n        - address: 0.0.0.2/0\n          enabled: true\n        - address: 0.0.0.3/0\n          enabled: true\n      databaseId: a6bc9c26-e7ce-424f-84c7-0a00afb12588\n      enabled: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# the import id should be the database_id.\n\n```sh\n $ pulumi import astra:index/accessList:AccessList example a6bc9c26-e7ce-424f-84c7-0a00afb12588\n```\n\n ",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astra:index/AccessListAddress:AccessListAddress"
                    },
                    "description": "List of address requests that should have access to database endpoints.\n"
                },
                "databaseId": {
                    "type": "string",
                    "description": "The ID of the Astra database.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Public access restrictions enabled or disabled\n"
                }
            },
            "required": [
                "addresses",
                "databaseId"
            ],
            "inputProperties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/astra:index/AccessListAddress:AccessListAddress"
                    },
                    "description": "List of address requests that should have access to database endpoints.\n",
                    "willReplaceOnChanges": true
                },
                "databaseId": {
                    "type": "string",
                    "description": "The ID of the Astra database.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Public access restrictions enabled or disabled\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "addresses",
                "databaseId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessList resources.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astra:index/AccessListAddress:AccessListAddress"
                        },
                        "description": "List of address requests that should have access to database endpoints.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseId": {
                        "type": "string",
                        "description": "The ID of the Astra database.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Public access restrictions enabled or disabled\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "astra:index/cdc:Cdc": {
            "description": "`astra.Cdc` enables cdc for an Astra Serverless table.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumiverse/astra\";\n\nconst streamingTenant_1 = new astra.StreamingTenant(\"streamingTenant-1\", {\n    tenantName: \"terraformtest\",\n    topic: \"terraformtest\",\n    region: \"useast-4\",\n    cloudProvider: \"gcp\",\n    userEmail: \"seb@datastax.com\",\n});\nconst cdc_1 = new astra.Cdc(\"cdc-1\", {\n    databaseId: \"5b70892f-e01a-4595-98e6-19ecc9985d50\",\n    databaseName: \"sai_test\",\n    table: \"test\",\n    keyspace: \"sai_test\",\n    topicPartitions: 3,\n    tenantName: streamingTenant_1.tenantName,\n}, {\n    dependsOn: [streamingTenant_1],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nstreaming_tenant_1 = astra.StreamingTenant(\"streamingTenant-1\",\n    tenant_name=\"terraformtest\",\n    topic=\"terraformtest\",\n    region=\"useast-4\",\n    cloud_provider=\"gcp\",\n    user_email=\"seb@datastax.com\")\ncdc_1 = astra.Cdc(\"cdc-1\",\n    database_id=\"5b70892f-e01a-4595-98e6-19ecc9985d50\",\n    database_name=\"sai_test\",\n    table=\"test\",\n    keyspace=\"sai_test\",\n    topic_partitions=3,\n    tenant_name=streaming_tenant_1.tenant_name,\n    opts=pulumi.ResourceOptions(depends_on=[streaming_tenant_1]))\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var streamingTenant_1 = new Astra.StreamingTenant(\"streamingTenant-1\", new Astra.StreamingTenantArgs\n        {\n            TenantName = \"terraformtest\",\n            Topic = \"terraformtest\",\n            Region = \"useast-4\",\n            CloudProvider = \"gcp\",\n            UserEmail = \"seb@datastax.com\",\n        });\n        var cdc_1 = new Astra.Cdc(\"cdc-1\", new Astra.CdcArgs\n        {\n            DatabaseId = \"5b70892f-e01a-4595-98e6-19ecc9985d50\",\n            DatabaseName = \"sai_test\",\n            Table = \"test\",\n            Keyspace = \"sai_test\",\n            TopicPartitions = 3,\n            TenantName = streamingTenant_1.TenantName,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                streamingTenant_1,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewStreamingTenant(ctx, \"streamingTenant-1\", \u0026astra.StreamingTenantArgs{\n\t\t\tTenantName:    pulumi.String(\"terraformtest\"),\n\t\t\tTopic:         pulumi.String(\"terraformtest\"),\n\t\t\tRegion:        pulumi.String(\"useast-4\"),\n\t\t\tCloudProvider: pulumi.String(\"gcp\"),\n\t\t\tUserEmail:     pulumi.String(\"seb@datastax.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astra.NewCdc(ctx, \"cdc-1\", \u0026astra.CdcArgs{\n\t\t\tDatabaseId:      pulumi.String(\"5b70892f-e01a-4595-98e6-19ecc9985d50\"),\n\t\t\tDatabaseName:    pulumi.String(\"sai_test\"),\n\t\t\tTable:           pulumi.String(\"test\"),\n\t\t\tKeyspace:        pulumi.String(\"sai_test\"),\n\t\t\tTopicPartitions: pulumi.Int(3),\n\t\t\tTenantName:      streamingTenant_1.TenantName,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tstreamingTenant_1,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.StreamingTenant;\nimport com.pulumi.astra.StreamingTenantArgs;\nimport com.pulumi.astra.Cdc;\nimport com.pulumi.astra.CdcArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var streamingTenant_1 = new StreamingTenant(\"streamingTenant-1\", StreamingTenantArgs.builder()        \n            .tenantName(\"terraformtest\")\n            .topic(\"terraformtest\")\n            .region(\"useast-4\")\n            .cloudProvider(\"gcp\")\n            .userEmail(\"seb@datastax.com\")\n            .build());\n\n        var cdc_1 = new Cdc(\"cdc-1\", CdcArgs.builder()        \n            .databaseId(\"5b70892f-e01a-4595-98e6-19ecc9985d50\")\n            .databaseName(\"sai_test\")\n            .table(\"test\")\n            .keyspace(\"sai_test\")\n            .topicPartitions(3)\n            .tenantName(streamingTenant_1.tenantName())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(streamingTenant_1)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  streamingTenant-1:\n    type: astra:StreamingTenant\n    properties:\n      tenantName: terraformtest\n      topic: terraformtest\n      region: useast-4\n      cloudProvider: gcp\n      userEmail: seb@datastax.com\n  cdc-1:\n    type: astra:Cdc\n    properties:\n      databaseId: 5b70892f-e01a-4595-98e6-19ecc9985d50\n      databaseName: sai_test\n      table: test\n      keyspace: sai_test\n      topicPartitions: 3\n      tenantName: ${[\"streamingTenant-1\"].tenantName}\n    options:\n      dependson:\n        - ${[\"streamingTenant-1\"]}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import astra:index/cdc:Cdc example databaseId/keyspace/table/tenantName\n```\n\n ",
            "properties": {
                "connectorStatus": {
                    "type": "string",
                    "description": "Streaming tenant name\n"
                },
                "dataTopic": {
                    "type": "string",
                    "description": "Streaming tenant name\n"
                },
                "databaseId": {
                    "type": "string",
                    "description": "Astra database to create the keyspace.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Astra database name.\n"
                },
                "keyspace": {
                    "type": "string",
                    "description": "Initial keyspace name. For additional keyspaces, use the astra_keyspace resource.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Astra database table.\n"
                },
                "tenantName": {
                    "type": "string",
                    "description": "Streaming tenant name\n"
                },
                "topicPartitions": {
                    "type": "integer",
                    "description": "Number of partitions in cdc topic.\n"
                }
            },
            "required": [
                "connectorStatus",
                "dataTopic",
                "databaseId",
                "databaseName",
                "keyspace",
                "table",
                "tenantName",
                "topicPartitions"
            ],
            "inputProperties": {
                "databaseId": {
                    "type": "string",
                    "description": "Astra database to create the keyspace.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "Astra database name.\n",
                    "willReplaceOnChanges": true
                },
                "keyspace": {
                    "type": "string",
                    "description": "Initial keyspace name. For additional keyspaces, use the astra_keyspace resource.\n",
                    "willReplaceOnChanges": true
                },
                "table": {
                    "type": "string",
                    "description": "Astra database table.\n",
                    "willReplaceOnChanges": true
                },
                "tenantName": {
                    "type": "string",
                    "description": "Streaming tenant name\n",
                    "willReplaceOnChanges": true
                },
                "topicPartitions": {
                    "type": "integer",
                    "description": "Number of partitions in cdc topic.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseId",
                "databaseName",
                "keyspace",
                "table",
                "tenantName",
                "topicPartitions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cdc resources.\n",
                "properties": {
                    "connectorStatus": {
                        "type": "string",
                        "description": "Streaming tenant name\n"
                    },
                    "dataTopic": {
                        "type": "string",
                        "description": "Streaming tenant name\n"
                    },
                    "databaseId": {
                        "type": "string",
                        "description": "Astra database to create the keyspace.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Astra database name.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyspace": {
                        "type": "string",
                        "description": "Initial keyspace name. For additional keyspaces, use the astra_keyspace resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "table": {
                        "type": "string",
                        "description": "Astra database table.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "Streaming tenant name\n",
                        "willReplaceOnChanges": true
                    },
                    "topicPartitions": {
                        "type": "integer",
                        "description": "Number of partitions in cdc topic.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "astra:index/database:Database": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst example = new astra.Database(\"example\", {\n    cloudProvider: \"gcp\",\n    keyspace: \"keyspace\",\n    regions: [\"us-east1\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nexample = astra.Database(\"example\",\n    cloud_provider=\"gcp\",\n    keyspace=\"keyspace\",\n    regions=[\"us-east1\"])\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Astra.Database(\"example\", new Astra.DatabaseArgs\n        {\n            CloudProvider = \"gcp\",\n            Keyspace = \"keyspace\",\n            Regions = \n            {\n                \"us-east1\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewDatabase(ctx, \"example\", \u0026astra.DatabaseArgs{\n\t\t\tCloudProvider: pulumi.String(\"gcp\"),\n\t\t\tKeyspace:      pulumi.String(\"keyspace\"),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.Database;\nimport com.pulumi.astra.DatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Database(\"example\", DatabaseArgs.builder()        \n            .cloudProvider(\"gcp\")\n            .keyspace(\"keyspace\")\n            .regions(\"us-east1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astra:Database\n    properties:\n      cloudProvider: gcp\n      keyspace: keyspace\n      regions:\n        - us-east1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import astra:index/database:Database example 48bfc13b-c1a5-48db-b70f-b6ef9709872b\n```\n\n ",
            "properties": {
                "additionalKeyspaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional keyspaces\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "The cloud provider to launch the database. (Currently supported: aws, azure, gcp)\n"
                },
                "cqlshUrl": {
                    "type": "string",
                    "description": "The cqlsh_url\n"
                },
                "dataEndpointUrl": {
                    "type": "string",
                    "description": "The data_endpoint_url\n"
                },
                "datacenters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of Datacenter IDs. The map key is \"cloud_provider.region\". Example: \"GCP.us-east4\".\n"
                },
                "grafanaUrl": {
                    "type": "string",
                    "description": "The grafana_url\n"
                },
                "graphqlUrl": {
                    "type": "string",
                    "description": "The graphql_url\n"
                },
                "keyspace": {
                    "type": "string",
                    "description": "Initial keyspace name. For additional keyspaces, use the astra_keyspace resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Astra database name.\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "The node_count\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The org id.\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The owner id.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported\nregions)\n"
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "The replication_factor\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status\n"
                },
                "totalStorage": {
                    "type": "integer",
                    "description": "The total_storage\n"
                }
            },
            "required": [
                "additionalKeyspaces",
                "cloudProvider",
                "cqlshUrl",
                "dataEndpointUrl",
                "datacenters",
                "grafanaUrl",
                "graphqlUrl",
                "keyspace",
                "name",
                "nodeCount",
                "organizationId",
                "ownerId",
                "regions",
                "replicationFactor",
                "status",
                "totalStorage"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "The cloud provider to launch the database. (Currently supported: aws, azure, gcp)\n",
                    "willReplaceOnChanges": true
                },
                "keyspace": {
                    "type": "string",
                    "description": "Initial keyspace name. For additional keyspaces, use the astra_keyspace resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Astra database name.\n",
                    "willReplaceOnChanges": true
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported\nregions)\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "keyspace",
                "regions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "additionalKeyspaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional keyspaces\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "The cloud provider to launch the database. (Currently supported: aws, azure, gcp)\n",
                        "willReplaceOnChanges": true
                    },
                    "cqlshUrl": {
                        "type": "string",
                        "description": "The cqlsh_url\n"
                    },
                    "dataEndpointUrl": {
                        "type": "string",
                        "description": "The data_endpoint_url\n"
                    },
                    "datacenters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of Datacenter IDs. The map key is \"cloud_provider.region\". Example: \"GCP.us-east4\".\n"
                    },
                    "grafanaUrl": {
                        "type": "string",
                        "description": "The grafana_url\n"
                    },
                    "graphqlUrl": {
                        "type": "string",
                        "description": "The graphql_url\n"
                    },
                    "keyspace": {
                        "type": "string",
                        "description": "Initial keyspace name. For additional keyspaces, use the astra_keyspace resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Astra database name.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeCount": {
                        "type": "integer",
                        "description": "The node_count\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The org id.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The owner id.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported\nregions)\n"
                    },
                    "replicationFactor": {
                        "type": "integer",
                        "description": "The replication_factor\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status\n"
                    },
                    "totalStorage": {
                        "type": "integer",
                        "description": "The total_storage\n"
                    }
                },
                "type": "object"
            }
        },
        "astra:index/keyspace:Keyspace": {
            "description": "`astra.Keyspace` provides a keyspace resource. Keyspaces are groupings of tables for Cassandra. `astra.Keyspace` resources are associated with a database id. You can have multiple keyspaces per DB in addition to the default keyspace provided in the `astra.Database` resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst example = new astra.Keyspace(\"example\", {\n    databaseId: \"48bfc13b-c1a5-48db-b70f-b6ef9709872b\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nexample = astra.Keyspace(\"example\", database_id=\"48bfc13b-c1a5-48db-b70f-b6ef9709872b\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Astra.Keyspace(\"example\", new Astra.KeyspaceArgs\n        {\n            DatabaseId = \"48bfc13b-c1a5-48db-b70f-b6ef9709872b\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewKeyspace(ctx, \"example\", \u0026astra.KeyspaceArgs{\n\t\t\tDatabaseId: pulumi.String(\"48bfc13b-c1a5-48db-b70f-b6ef9709872b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.Keyspace;\nimport com.pulumi.astra.KeyspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Keyspace(\"example\", KeyspaceArgs.builder()        \n            .databaseId(\"48bfc13b-c1a5-48db-b70f-b6ef9709872b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astra:Keyspace\n    properties:\n      databaseId: 48bfc13b-c1a5-48db-b70f-b6ef9709872b\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# the import id includes the database_id and the keyspace name.\n\n```sh\n $ pulumi import astra:index/keyspace:Keyspace example 48bfc13b-c1a5-48db-b70f-b6ef9709872b/keyspace/example\n```\n\n ",
            "properties": {
                "databaseId": {
                    "type": "string",
                    "description": "Astra database to create the keyspace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters and numbers are supported\nas the first character.\n"
                }
            },
            "required": [
                "databaseId",
                "name"
            ],
            "inputProperties": {
                "databaseId": {
                    "type": "string",
                    "description": "Astra database to create the keyspace.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters and numbers are supported\nas the first character.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Keyspace resources.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "Astra database to create the keyspace.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters and numbers are supported\nas the first character.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "astra:index/privateLink:PrivateLink": {
            "description": "`astra.PrivateLink` provides a private link resource. Private Link is a private network endpoint that can be created to connect from your vpc to Astra without using a publicly routable IP address. `astra.PrivateLink` resources are associated with a database id. Once the private_link resource is created in Astra it must be linked to an endpoint within your vpc, use `astra.PrivateLinkEndpoint` to do this.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst example = new astra.PrivateLink(\"example\", {\n    allowedPrincipals: [\"arn:aws:iam::111708290731:user/sebastian.estevez\"],\n    databaseId: \"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n    datacenterId: \"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nexample = astra.PrivateLink(\"example\",\n    allowed_principals=[\"arn:aws:iam::111708290731:user/sebastian.estevez\"],\n    database_id=\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n    datacenter_id=\"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Astra.PrivateLink(\"example\", new Astra.PrivateLinkArgs\n        {\n            AllowedPrincipals = \n            {\n                \"arn:aws:iam::111708290731:user/sebastian.estevez\",\n            },\n            DatabaseId = \"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n            DatacenterId = \"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewPrivateLink(ctx, \"example\", \u0026astra.PrivateLinkArgs{\n\t\t\tAllowedPrincipals: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"arn:aws:iam::111708290731:user/sebastian.estevez\"),\n\t\t\t},\n\t\t\tDatabaseId:   pulumi.String(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\"),\n\t\t\tDatacenterId: pulumi.String(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.PrivateLink;\nimport com.pulumi.astra.PrivateLinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new PrivateLink(\"example\", PrivateLinkArgs.builder()        \n            .allowedPrincipals(\"arn:aws:iam::111708290731:user/sebastian.estevez\")\n            .databaseId(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\")\n            .datacenterId(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astra:PrivateLink\n    properties:\n      allowedPrincipals:\n        - arn:aws:iam::111708290731:user/sebastian.estevez\n      databaseId: a6bc9c26-e7ce-424f-84c7-0a00afb12588\n      datacenterId: a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import astra:index/privateLink:PrivateLink example a6bc9c26-e7ce-424f-84c7-0a00afb12588/datacenter/a6bc9c26-e7ce-424f-84c7-0a00afb12588/serviceNames/svc-name-here\n```\n\n ",
            "properties": {
                "allowedPrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).\n"
                },
                "databaseId": {
                    "type": "string",
                    "description": "Astra database where private link will be enabled.\n"
                },
                "datacenterId": {
                    "type": "string",
                    "description": "Astra datacenter in the region where the private link will be created.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "Name of the endpoint service for private link generated by the cloud provider.\n"
                }
            },
            "required": [
                "allowedPrincipals",
                "databaseId",
                "datacenterId",
                "serviceName"
            ],
            "inputProperties": {
                "allowedPrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).\n",
                    "willReplaceOnChanges": true
                },
                "databaseId": {
                    "type": "string",
                    "description": "Astra database where private link will be enabled.\n",
                    "willReplaceOnChanges": true
                },
                "datacenterId": {
                    "type": "string",
                    "description": "Astra datacenter in the region where the private link will be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allowedPrincipals",
                "databaseId",
                "datacenterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLink resources.\n",
                "properties": {
                    "allowedPrincipals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseId": {
                        "type": "string",
                        "description": "Astra database where private link will be enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "datacenterId": {
                        "type": "string",
                        "description": "Astra datacenter in the region where the private link will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "Name of the endpoint service for private link generated by the cloud provider.\n"
                    }
                },
                "type": "object"
            }
        },
        "astra:index/privateLinkEndpoint:PrivateLinkEndpoint": {
            "description": "`astra.PrivateLinkEndpoint` completes the creation of a private link endpoint by associating it with your endpoint.\n\n\n## Import\n\n# Amazon AWS example\n\n```sh\n $ pulumi import astra:index/privateLinkEndpoint:PrivateLinkEndpoint example a6bc9c26-e7ce-424f-84c7-0a00afb12588/datacenter/a6bc9c26-e7ce-424f-84c7-0a00afb12588-1/endpoint/vpce-0f7aed6e7a18a1791\n```\n\n # Google GCP example\n\n```sh\n $ pulumi import astra:index/privateLinkEndpoint:PrivateLinkEndpoint example a6bc9c26-e7ce-424f-84c7-0a00afb12588/datacenter/a6bc9c26-e7ce-424f-84c7-0a00afb12588-1/endpoint/13585698993864708\n```\n\n # Azure EKS example\n\n```sh\n $ pulumi import astra:index/privateLinkEndpoint:PrivateLinkEndpoint example a6bc9c26-e7ce-424f-84c7-0a00afb12588/datacenter/a6bc9c26-e7ce-424f-84c7-0a00afb12588-1/endpoint/dc5ee5b1-4fc2-463e-a56b-ff54dd38b879/providers/Microsoft.Network/privateEndpoints/private-endpoint-example\n```\n\n ",
            "properties": {
                "astraEndpointId": {
                    "type": "string",
                    "description": "Endpoint ID for referencing within Astra. May be different than the endpoint_id of this resource.\n"
                },
                "databaseId": {
                    "type": "string",
                    "description": "The ID of the Astra database.\n"
                },
                "datacenterId": {
                    "type": "string",
                    "description": "Astra datacenter in the region where the private link will be created.\n"
                },
                "endpointId": {
                    "type": "string",
                    "description": "Endpoint created in your cloud provider account example: \"vpce-svc-1148ea04af8675309\"\n"
                }
            },
            "required": [
                "astraEndpointId",
                "databaseId",
                "datacenterId",
                "endpointId"
            ],
            "inputProperties": {
                "databaseId": {
                    "type": "string",
                    "description": "The ID of the Astra database.\n",
                    "willReplaceOnChanges": true
                },
                "datacenterId": {
                    "type": "string",
                    "description": "Astra datacenter in the region where the private link will be created.\n",
                    "willReplaceOnChanges": true
                },
                "endpointId": {
                    "type": "string",
                    "description": "Endpoint created in your cloud provider account example: \"vpce-svc-1148ea04af8675309\"\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseId",
                "datacenterId",
                "endpointId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLinkEndpoint resources.\n",
                "properties": {
                    "astraEndpointId": {
                        "type": "string",
                        "description": "Endpoint ID for referencing within Astra. May be different than the endpoint_id of this resource.\n"
                    },
                    "databaseId": {
                        "type": "string",
                        "description": "The ID of the Astra database.\n",
                        "willReplaceOnChanges": true
                    },
                    "datacenterId": {
                        "type": "string",
                        "description": "Astra datacenter in the region where the private link will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpointId": {
                        "type": "string",
                        "description": "Endpoint created in your cloud provider account example: \"vpce-svc-1148ea04af8675309\"\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "astra:index/role:Role": {
            "description": "`astra.Role` resource represents custom roles for a particular Astra Org. Custom roles can be assigned to an Astra user is to grant them granular permissions when the default roles in the UI are not specific enough. Roles are composed of policies which are granted to resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst example = new astra.Role(\"example\", {\n    description: \"test role\",\n    effect: \"allow\",\n    policies: [\"db-all-keyspace-create\"],\n    resources: [\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\"],\n    roleName: \"puppies\",\n});\nconst example2 = new astra.Role(\"example2\", {\n    description: \"complex role\",\n    effect: \"allow\",\n    policies: [\n        \"accesslist-read\",\n        \"db-all-keyspace-describe\",\n        \"db-keyspace-describe\",\n        \"db-table-select\",\n        \"db-table-describe\",\n        \"db-graphql\",\n        \"db-rest\",\n        \"db-cql\",\n    ],\n    resources: [\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_schema:table:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system:table:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_virtual_schema:table:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*:table:*\",\n    ],\n    roleName: \"puppies\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nexample = astra.Role(\"example\",\n    description=\"test role\",\n    effect=\"allow\",\n    policies=[\"db-all-keyspace-create\"],\n    resources=[\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\"],\n    role_name=\"puppies\")\nexample2 = astra.Role(\"example2\",\n    description=\"complex role\",\n    effect=\"allow\",\n    policies=[\n        \"accesslist-read\",\n        \"db-all-keyspace-describe\",\n        \"db-keyspace-describe\",\n        \"db-table-select\",\n        \"db-table-describe\",\n        \"db-graphql\",\n        \"db-rest\",\n        \"db-cql\",\n    ],\n    resources=[\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_schema:table:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system:table:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_virtual_schema:table:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*\",\n        \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*:table:*\",\n    ],\n    role_name=\"puppies\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Astra.Role(\"example\", new Astra.RoleArgs\n        {\n            Description = \"test role\",\n            Effect = \"allow\",\n            Policies = \n            {\n                \"db-all-keyspace-create\",\n            },\n            Resources = \n            {\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n            },\n            RoleName = \"puppies\",\n        });\n        var example2 = new Astra.Role(\"example2\", new Astra.RoleArgs\n        {\n            Description = \"complex role\",\n            Effect = \"allow\",\n            Policies = \n            {\n                \"accesslist-read\",\n                \"db-all-keyspace-describe\",\n                \"db-keyspace-describe\",\n                \"db-table-select\",\n                \"db-table-describe\",\n                \"db-graphql\",\n                \"db-rest\",\n                \"db-cql\",\n            },\n            Resources = \n            {\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_schema:table:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system:table:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_virtual_schema:table:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*:table:*\",\n            },\n            RoleName = \"puppies\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewRole(ctx, \"example\", \u0026astra.RoleArgs{\n\t\t\tDescription: pulumi.String(\"test role\"),\n\t\t\tEffect:      pulumi.String(\"allow\"),\n\t\t\tPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"db-all-keyspace-create\"),\n\t\t\t},\n\t\t\tResources: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\"),\n\t\t\t},\n\t\t\tRoleName: pulumi.String(\"puppies\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = astra.NewRole(ctx, \"example2\", \u0026astra.RoleArgs{\n\t\t\tDescription: pulumi.String(\"complex role\"),\n\t\t\tEffect:      pulumi.String(\"allow\"),\n\t\t\tPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"accesslist-read\"),\n\t\t\t\tpulumi.String(\"db-all-keyspace-describe\"),\n\t\t\t\tpulumi.String(\"db-keyspace-describe\"),\n\t\t\t\tpulumi.String(\"db-table-select\"),\n\t\t\t\tpulumi.String(\"db-table-describe\"),\n\t\t\t\tpulumi.String(\"db-graphql\"),\n\t\t\t\tpulumi.String(\"db-rest\"),\n\t\t\t\tpulumi.String(\"db-cql\"),\n\t\t\t},\n\t\t\tResources: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\"),\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50\"),\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_schema:table:*\"),\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system:table:*\"),\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_virtual_schema:table:*\"),\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*\"),\n\t\t\t\tpulumi.String(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*:table:*\"),\n\t\t\t},\n\t\t\tRoleName: pulumi.String(\"puppies\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.Role;\nimport com.pulumi.astra.RoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Role(\"example\", RoleArgs.builder()        \n            .description(\"test role\")\n            .effect(\"allow\")\n            .policies(\"db-all-keyspace-create\")\n            .resources(\"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\")\n            .roleName(\"puppies\")\n            .build());\n\n        var example2 = new Role(\"example2\", RoleArgs.builder()        \n            .description(\"complex role\")\n            .effect(\"allow\")\n            .policies(            \n                \"accesslist-read\",\n                \"db-all-keyspace-describe\",\n                \"db-keyspace-describe\",\n                \"db-table-select\",\n                \"db-table-describe\",\n                \"db-graphql\",\n                \"db-rest\",\n                \"db-cql\")\n            .resources(            \n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_schema:table:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system:table:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_virtual_schema:table:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*\",\n                \"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*:table:*\")\n            .roleName(\"puppies\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astra:Role\n    properties:\n      description: test role\n      effect: allow\n      policies:\n        - db-all-keyspace-create\n      resources:\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\n      roleName: puppies\n  example2:\n    type: astra:Role\n    properties:\n      description: complex role\n      effect: allow\n      policies:\n        - accesslist-read\n        - db-all-keyspace-describe\n        - db-keyspace-describe\n        - db-table-select\n        - db-table-describe\n        - db-graphql\n        - db-rest\n        - db-cql\n      resources:\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_schema:table:*\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system:table:*\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:system_virtual_schema:table:*\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*\n        - drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:5b70892f-e01a-4595-98e6-19ecc9985d50:keyspace:*:table:*\n      roleName: puppies\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import astra:index/role:Role example role-id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Role description\n"
                },
                "effect": {
                    "type": "string",
                    "description": "Role effect\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of policies for the role. See\nhttps://docs.datastax.com/en/astra/docs/user-permissions.html#_operational_roles_detail for supported policies.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Resources for which role is applicable (format is \"drn:astra:org:\u003corg UUID\u003e\", followed by optional resource criteria.\nSee example usage above).\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "Role ID, system generated\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Role name\n"
                }
            },
            "required": [
                "description",
                "effect",
                "policies",
                "resources",
                "roleId",
                "roleName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Role description\n"
                },
                "effect": {
                    "type": "string",
                    "description": "Role effect\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of policies for the role. See\nhttps://docs.datastax.com/en/astra/docs/user-permissions.html#_operational_roles_detail for supported policies.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Resources for which role is applicable (format is \"drn:astra:org:\u003corg UUID\u003e\", followed by optional resource criteria.\nSee example usage above).\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Role name\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "effect",
                "policies",
                "resources",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Role description\n"
                    },
                    "effect": {
                        "type": "string",
                        "description": "Role effect\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of policies for the role. See\nhttps://docs.datastax.com/en/astra/docs/user-permissions.html#_operational_roles_detail for supported policies.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resources for which role is applicable (format is \"drn:astra:org:\u003corg UUID\u003e\", followed by optional resource criteria.\nSee example usage above).\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "Role ID, system generated\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Role name\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "astra:index/streamingTenant:StreamingTenant": {
            "description": "`astra.StreamingTenant` creates an Astra Streaming tenant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst streaming_tenant_1 = new astra.StreamingTenant(\"streaming_tenant-1\", {\n    cloudProvider: \"gcp\",\n    region: \"useast-4\",\n    tenantName: \"terraformtest\",\n    topic: \"terraformtest\",\n    userEmail: \"seb@datastax.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nstreaming_tenant_1 = astra.StreamingTenant(\"streamingTenant-1\",\n    cloud_provider=\"gcp\",\n    region=\"useast-4\",\n    tenant_name=\"terraformtest\",\n    topic=\"terraformtest\",\n    user_email=\"seb@datastax.com\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var streamingTenant_1 = new Astra.StreamingTenant(\"streamingTenant-1\", new Astra.StreamingTenantArgs\n        {\n            CloudProvider = \"gcp\",\n            Region = \"useast-4\",\n            TenantName = \"terraformtest\",\n            Topic = \"terraformtest\",\n            UserEmail = \"seb@datastax.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewStreamingTenant(ctx, \"streamingTenant-1\", \u0026astra.StreamingTenantArgs{\n\t\t\tCloudProvider: pulumi.String(\"gcp\"),\n\t\t\tRegion:        pulumi.String(\"useast-4\"),\n\t\t\tTenantName:    pulumi.String(\"terraformtest\"),\n\t\t\tTopic:         pulumi.String(\"terraformtest\"),\n\t\t\tUserEmail:     pulumi.String(\"seb@datastax.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.StreamingTenant;\nimport com.pulumi.astra.StreamingTenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var streamingTenant_1 = new StreamingTenant(\"streamingTenant-1\", StreamingTenantArgs.builder()        \n            .cloudProvider(\"gcp\")\n            .region(\"useast-4\")\n            .tenantName(\"terraformtest\")\n            .topic(\"terraformtest\")\n            .userEmail(\"seb@datastax.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  streamingTenant-1:\n    type: astra:StreamingTenant\n    properties:\n      cloudProvider: gcp\n      region: useast-4\n      tenantName: terraformtest\n      topic: terraformtest\n      userEmail: seb@datastax.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import astra:index/streamingTenant:StreamingTenant example tenant_name\n```\n\n ",
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider\n"
                },
                "region": {
                    "type": "string",
                    "description": "cloud region\n"
                },
                "tenantName": {
                    "type": "string",
                    "description": "Streaming tenant name.\n"
                },
                "topic": {
                    "type": "string",
                    "description": "Streaming tenant topic.\n"
                },
                "userEmail": {
                    "type": "string",
                    "description": "User email for tenant.\n"
                }
            },
            "required": [
                "cloudProvider",
                "region",
                "tenantName",
                "topic",
                "userEmail"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "cloud region\n",
                    "willReplaceOnChanges": true
                },
                "tenantName": {
                    "type": "string",
                    "description": "Streaming tenant name.\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "Streaming tenant topic.\n",
                    "willReplaceOnChanges": true
                },
                "userEmail": {
                    "type": "string",
                    "description": "User email for tenant.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "region",
                "tenantName",
                "topic",
                "userEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamingTenant resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "cloud region\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "Streaming tenant name.\n",
                        "willReplaceOnChanges": true
                    },
                    "topic": {
                        "type": "string",
                        "description": "Streaming tenant topic.\n",
                        "willReplaceOnChanges": true
                    },
                    "userEmail": {
                        "type": "string",
                        "description": "User email for tenant.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "astra:index/token:Token": {
            "description": "`astra.Token` resource represents a token with a specific role assigned.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst example = new astra.Token(\"example\", {\n    roles: [\"a8cd363d-5069-4a2b-86d8-0578139812ac\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_astra as astra\n\nexample = astra.Token(\"example\", roles=[\"a8cd363d-5069-4a2b-86d8-0578139812ac\"])\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumiverse.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Astra.Token(\"example\", new Astra.TokenArgs\n        {\n            Roles = \n            {\n                \"a8cd363d-5069-4a2b-86d8-0578139812ac\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.NewToken(ctx, \"example\", \u0026astra.TokenArgs{\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"a8cd363d-5069-4a2b-86d8-0578139812ac\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.Token;\nimport com.pulumi.astra.TokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Token(\"example\", TokenArgs.builder()        \n            .roles(\"a8cd363d-5069-4a2b-86d8-0578139812ac\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: astra:Token\n    properties:\n      roles:\n        - a8cd363d-5069-4a2b-86d8-0578139812ac\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import astra:index/token:Token example client-secret\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Client id, use as username in cql to connect\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Role IDs to be assigned to the generated token\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret, use as password in cql to connect\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token, use as auth bearer for API calls or as password in combination with the word `token` in cql\n",
                    "language": {
                        "csharp": {
                            "name": "AstraToken"
                        }
                    }
                }
            },
            "required": [
                "clientId",
                "roles",
                "secret",
                "token"
            ],
            "inputProperties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Role IDs to be assigned to the generated token\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "Client id, use as username in cql to connect\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Role IDs to be assigned to the generated token\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret, use as password in cql to connect\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token, use as auth bearer for API calls or as password in combination with the word `token` in cql\n",
                        "language": {
                            "csharp": {
                                "name": "AstraToken"
                            }
                        }
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "astra:index/getAccessList:getAccessList": {
            "description": "`astra.AccessList` provides a datasource that lists the access lists for an Astra database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst dev = pulumi.output(astra.getAccessList({\n    databaseId: \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndev = astra.get_access_list(database_id=\"8d356587-73b3-430a-9c0e-d780332e2afb\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dev = Output.Create(Astra.GetAccessList.InvokeAsync(new Astra.GetAccessListArgs\n        {\n            DatabaseId = \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.LookupAccessList(ctx, \u0026GetAccessListArgs{\n\t\t\tDatabaseId: \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetAccessListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dev = AstraFunctions.getAccessList(GetAccessListArgs.builder()\n            .databaseId(\"8d356587-73b3-430a-9c0e-d780332e2afb\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dev:\n    Fn::Invoke:\n      Function: astra:getAccessList\n      Arguments:\n        databaseId: 8d356587-73b3-430a-9c0e-d780332e2afb\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessList.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccessList.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astra:index/getAccessListAddress:getAccessListAddress"
                        }
                    },
                    "databaseId": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "databaseId",
                    "enabled",
                    "id"
                ]
            }
        },
        "astra:index/getAstraDatabase:getAstraDatabase": {
            "description": "`astra.Database` provides a datasource for Astra an Astra database. This can be used to select an existing database within your Astra Organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst db = pulumi.output(astra.getAstraDatabase({\n    databaseId: \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndb = astra.get_astra_database(database_id=\"8d356587-73b3-430a-9c0e-d780332e2afb\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var db = Output.Create(Astra.GetAstraDatabase.InvokeAsync(new Astra.GetAstraDatabaseArgs\n        {\n            DatabaseId = \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.GetAstraDatabase(ctx, \u0026GetAstraDatabaseArgs{\n\t\t\tDatabaseId: \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetAstraDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var db = AstraFunctions.getAstraDatabase(GetAstraDatabaseArgs.builder()\n            .databaseId(\"8d356587-73b3-430a-9c0e-d780332e2afb\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  db:\n    Fn::Invoke:\n      Function: astra:getAstraDatabase\n      Arguments:\n        databaseId: 8d356587-73b3-430a-9c0e-d780332e2afb\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAstraDatabase.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAstraDatabase.\n",
                "properties": {
                    "additionalKeyspaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cloudProvider": {
                        "type": "string"
                    },
                    "cqlshUrl": {
                        "type": "string"
                    },
                    "dataEndpointUrl": {
                        "type": "string"
                    },
                    "databaseId": {
                        "type": "string"
                    },
                    "datacenters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "grafanaUrl": {
                        "type": "string"
                    },
                    "graphqlUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keyspace": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeCount": {
                        "type": "integer"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "replicationFactor": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "totalStorage": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "additionalKeyspaces",
                    "cloudProvider",
                    "cqlshUrl",
                    "dataEndpointUrl",
                    "databaseId",
                    "datacenters",
                    "grafanaUrl",
                    "graphqlUrl",
                    "keyspace",
                    "name",
                    "nodeCount",
                    "organizationId",
                    "ownerId",
                    "regions",
                    "replicationFactor",
                    "status",
                    "totalStorage",
                    "id"
                ]
            }
        },
        "astra:index/getAstraDatabases:getAstraDatabases": {
            "description": "`astra.getAstraDatabases` provides a datasource for a list of Astra databases. This can be used to select databases within your Astra Organization.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAstraDatabases.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAstraDatabases.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astra:index/getAstraDatabasesResult:getAstraDatabasesResult"
                        }
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "results",
                    "id"
                ]
            }
        },
        "astra:index/getAvailableRegions:getAvailableRegions": {
            "description": "Retrieve a list of available cloud regions in Astra\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst regions = pulumi.output(astra.getAvailableRegions());\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\nregions = astra.get_available_regions()\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var regions = Output.Create(Astra.GetAvailableRegions.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.LookupAvailableRegions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```yaml\nvariables:\n  regions:\n    Fn::Invoke:\n      Function: astra:getAvailableRegions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAvailableRegions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astra:index/getAvailableRegionsResult:getAvailableRegionsResult"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "results",
                    "id"
                ]
            }
        },
        "astra:index/getKeyspace:getKeyspace": {
            "description": "`astra.Keyspace` provides a datasource for a particular keyspace. See `astra.getKeyspaces` if you're looking to fetch all the keyspaces for a particular database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst dev = pulumi.output(astra.getKeyspace({\n    databaseId: \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n    name: \"puppies\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndev = astra.get_keyspace(database_id=\"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n    name=\"puppies\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dev = Output.Create(Astra.GetKeyspace.InvokeAsync(new Astra.GetKeyspaceArgs\n        {\n            DatabaseId = \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n            Name = \"puppies\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.LookupKeyspace(ctx, \u0026GetKeyspaceArgs{\n\t\t\tDatabaseId: \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n\t\t\tName:       \"puppies\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetKeyspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dev = AstraFunctions.getKeyspace(GetKeyspaceArgs.builder()\n            .databaseId(\"f9f4b1e0-4c05-451e-9bba-d631295a7f73\")\n            .name(\"puppies\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dev:\n    Fn::Invoke:\n      Function: astra:getKeyspace\n      Arguments:\n        databaseId: f9f4b1e0-4c05-451e-9bba-d631295a7f73\n        name: puppies\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKeyspace.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKeyspace.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "name",
                    "id"
                ]
            }
        },
        "astra:index/getKeyspaces:getKeyspaces": {
            "description": "`astra.getKeyspaces` provides a datasource that lists the keyspaces in an Astra database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst dev = pulumi.output(astra.getKeyspaces({\n    databaseId: \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndev = astra.get_keyspaces(database_id=\"f9f4b1e0-4c05-451e-9bba-d631295a7f73\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dev = Output.Create(Astra.GetKeyspaces.InvokeAsync(new Astra.GetKeyspacesArgs\n        {\n            DatabaseId = \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.LookupKeyspaces(ctx, \u0026GetKeyspacesArgs{\n\t\t\tDatabaseId: \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetKeyspacesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dev = AstraFunctions.getKeyspaces(GetKeyspacesArgs.builder()\n            .databaseId(\"f9f4b1e0-4c05-451e-9bba-d631295a7f73\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dev:\n    Fn::Invoke:\n      Function: astra:getKeyspaces\n      Arguments:\n        databaseId: f9f4b1e0-4c05-451e-9bba-d631295a7f73\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKeyspaces.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKeyspaces.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astra:index/getKeyspacesResult:getKeyspacesResult"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "results",
                    "id"
                ]
            }
        },
        "astra:index/getPrivateLinkEndpoints:getPrivateLinkEndpoints": {
            "description": "`astra.getPrivateLinkEndpoints` provides a datasource that lists the private link endpoints for an Astra database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst dev = pulumi.output(astra.getPrivateLinkEndpoints({\n    databaseId: \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n    datacenterId: \"8d356587-73b3-430a-9c0e-d780332e2afb-1\",\n    endpointId: \"com.amazonaws.vpce.us-east-1.vpce-svc-03ac5a4b18ee480df\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndev = astra.get_private_link_endpoints(database_id=\"8d356587-73b3-430a-9c0e-d780332e2afb\",\n    datacenter_id=\"8d356587-73b3-430a-9c0e-d780332e2afb-1\",\n    endpoint_id=\"com.amazonaws.vpce.us-east-1.vpce-svc-03ac5a4b18ee480df\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dev = Output.Create(Astra.GetPrivateLinkEndpoints.InvokeAsync(new Astra.GetPrivateLinkEndpointsArgs\n        {\n            DatabaseId = \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n            DatacenterId = \"8d356587-73b3-430a-9c0e-d780332e2afb-1\",\n            EndpointId = \"com.amazonaws.vpce.us-east-1.vpce-svc-03ac5a4b18ee480df\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.LookupPrivateLinkEndpoints(ctx, \u0026GetPrivateLinkEndpointsArgs{\n\t\t\tDatabaseId:   \"8d356587-73b3-430a-9c0e-d780332e2afb\",\n\t\t\tDatacenterId: \"8d356587-73b3-430a-9c0e-d780332e2afb-1\",\n\t\t\tEndpointId:   \"com.amazonaws.vpce.us-east-1.vpce-svc-03ac5a4b18ee480df\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetPrivateLinkEndpointsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dev = AstraFunctions.getPrivateLinkEndpoints(GetPrivateLinkEndpointsArgs.builder()\n            .databaseId(\"8d356587-73b3-430a-9c0e-d780332e2afb\")\n            .datacenterId(\"8d356587-73b3-430a-9c0e-d780332e2afb-1\")\n            .endpointId(\"com.amazonaws.vpce.us-east-1.vpce-svc-03ac5a4b18ee480df\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dev:\n    Fn::Invoke:\n      Function: astra:getPrivateLinkEndpoints\n      Arguments:\n        databaseId: 8d356587-73b3-430a-9c0e-d780332e2afb\n        datacenterId: 8d356587-73b3-430a-9c0e-d780332e2afb-1\n        endpointId: com.amazonaws.vpce.us-east-1.vpce-svc-03ac5a4b18ee480df\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateLinkEndpoints.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "datacenterId": {
                        "type": "string"
                    },
                    "endpointId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "datacenterId",
                    "endpointId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateLinkEndpoints.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "datacenterId": {
                        "type": "string"
                    },
                    "endpointId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astra:index/getPrivateLinkEndpointsResult:getPrivateLinkEndpointsResult"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "datacenterId",
                    "endpointId",
                    "results",
                    "id"
                ]
            }
        },
        "astra:index/getPrivateLinks:getPrivateLinks": {
            "description": "`astra.getPrivateLinks` provides a datasource that lists the private links in an Astra database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst dev = pulumi.output(astra.getPrivateLinks({\n    databaseId: \"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n    datacenterId: \"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndev = astra.get_private_links(database_id=\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n    datacenter_id=\"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dev = Output.Create(Astra.GetPrivateLinks.InvokeAsync(new Astra.GetPrivateLinksArgs\n        {\n            DatabaseId = \"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n            DatacenterId = \"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.LookupPrivateLinks(ctx, \u0026GetPrivateLinksArgs{\n\t\t\tDatabaseId:   \"a6bc9c26-e7ce-424f-84c7-0a00afb12588\",\n\t\t\tDatacenterId: \"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetPrivateLinksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dev = AstraFunctions.getPrivateLinks(GetPrivateLinksArgs.builder()\n            .databaseId(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588\")\n            .datacenterId(\"a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dev:\n    Fn::Invoke:\n      Function: astra:getPrivateLinks\n      Arguments:\n        databaseId: a6bc9c26-e7ce-424f-84c7-0a00afb12588\n        datacenterId: a6bc9c26-e7ce-424f-84c7-0a00afb12588-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateLinks.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "datacenterId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "datacenterId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateLinks.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "datacenterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/astra:index/getPrivateLinksResult:getPrivateLinksResult"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "datacenterId",
                    "results",
                    "id"
                ]
            }
        },
        "astra:index/getRoles:getRoles": {
            "description": "`astra.Role` provides a datasource that lists the custom roles for an org.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst dev = pulumi.output(astra.getRoles({\n    roleId: \"role-id-here\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndev = astra.get_roles(role_id=\"role-id-here\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dev = Output.Create(Astra.GetRoles.InvokeAsync(new Astra.GetRolesArgs\n        {\n            RoleId = \"role-id-here\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.GetRoles(ctx, \u0026GetRolesArgs{\n\t\t\tRoleId: \"role-id-here\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dev = AstraFunctions.getRoles(GetRolesArgs.builder()\n            .roleId(\"role-id-here\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dev:\n    Fn::Invoke:\n      Function: astra:getRoles\n      Arguments:\n        roleId: role-id-here\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoles.\n",
                "properties": {
                    "roleId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "roleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "effect": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "roleId": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "effect",
                    "policies",
                    "resources",
                    "roleId",
                    "roleName",
                    "id"
                ]
            }
        },
        "astra:index/getSecureConnectBundleUrl:getSecureConnectBundleUrl": {
            "description": "`astra.getSecureConnectBundleUrl` provides a datasource that generates a temporary secure connect bundle URL. This URL lasts five minutes. Secure connect bundles are used to connect to Astra using cql cassandra drivers. See the [docs](https://docs.datastax.com/en/astra/docs/connecting-to-database.html) for more information on how to connect.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as astra from \"@pulumi/astra\";\n\nconst dev = pulumi.output(astra.getSecureConnectBundleUrl({\n    databaseId: \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_astra as astra\n\ndev = astra.get_secure_connect_bundle_url(database_id=\"f9f4b1e0-4c05-451e-9bba-d631295a7f73\")\n```\n```csharp\nusing Pulumi;\nusing Astra = Pulumi.Astra;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dev = Output.Create(Astra.GetSecureConnectBundleUrl.InvokeAsync(new Astra.GetSecureConnectBundleUrlArgs\n        {\n            DatabaseId = \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-astra/sdk/go/astra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-index/sdk/go/index\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := astra.GetSecureConnectBundleUrl(ctx, \u0026GetSecureConnectBundleUrlArgs{\n\t\t\tDatabaseId: \"f9f4b1e0-4c05-451e-9bba-d631295a7f73\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.astra.AstraFunctions;\nimport com.pulumi.astra.inputs.GetSecureConnectBundleUrlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dev = AstraFunctions.getSecureConnectBundleUrl(GetSecureConnectBundleUrlArgs.builder()\n            .databaseId(\"f9f4b1e0-4c05-451e-9bba-d631295a7f73\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dev:\n    Fn::Invoke:\n      Function: astra:getSecureConnectBundleUrl\n      Arguments:\n        databaseId: f9f4b1e0-4c05-451e-9bba-d631295a7f73\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecureConnectBundleUrl.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecureConnectBundleUrl.\n",
                "properties": {
                    "databaseId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "url",
                    "id"
                ]
            }
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `astra.getAstraDatabases` provides a datasource for a list of Astra databases. This can be used to select databases within your Astra Organization.
 */
export function getAstraDatabases(args?: GetAstraDatabasesArgs, opts?: pulumi.InvokeOptions): Promise<GetAstraDatabasesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("astra:index/getAstraDatabases:getAstraDatabases", {
        "cloudProvider": args.cloudProvider,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getAstraDatabases.
 */
export interface GetAstraDatabasesArgs {
    /**
     * The cloud provider
     */
    cloudProvider?: string;
    /**
     * Status flter. Only return databases with matching status, if supplied. Otherwise return all databases matching other requirements
     */
    status?: string;
}

/**
 * A collection of values returned by getAstraDatabases.
 */
export interface GetAstraDatabasesResult {
    /**
     * The cloud provider
     */
    readonly cloudProvider?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of Astra databases that match the search criteria.
     */
    readonly results: outputs.GetAstraDatabasesResult[];
    /**
     * Status flter. Only return databases with matching status, if supplied. Otherwise return all databases matching other requirements
     */
    readonly status?: string;
}

export function getAstraDatabasesOutput(args?: GetAstraDatabasesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAstraDatabasesResult> {
    return pulumi.output(args).apply(a => getAstraDatabases(a, opts))
}

/**
 * A collection of arguments for invoking getAstraDatabases.
 */
export interface GetAstraDatabasesOutputArgs {
    /**
     * The cloud provider
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Status flter. Only return databases with matching status, if supplied. Otherwise return all databases matching other requirements
     */
    status?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./accessList";
export * from "./cdc";
export * from "./database";
export * from "./getAccessList";
export * from "./getAstraDatabase";
export * from "./getAstraDatabases";
export * from "./getAvailableRegions";
export * from "./getKeyspace";
export * from "./getKeyspaces";
export * from "./getPrivateLinkEndpoints";
export * from "./getPrivateLinks";
export * from "./getRole";
export * from "./getRoles";
export * from "./getSecureConnectBundleUrl";
export * from "./getStreamingTenantTokens";
export * from "./getUsers";
export * from "./keyspace";
export * from "./privateLink";
export * from "./privateLinkEndpoint";
export * from "./provider";
export * from "./role";
export * from "./streamingSink";
export * from "./streamingTenant";
export * from "./streamingTopic";
export * from "./table";
export * from "./token";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AccessList } from "./accessList";
import { Cdc } from "./cdc";
import { Database } from "./database";
import { Keyspace } from "./keyspace";
import { PrivateLink } from "./privateLink";
import { PrivateLinkEndpoint } from "./privateLinkEndpoint";
import { Role } from "./role";
import { StreamingSink } from "./streamingSink";
import { StreamingTenant } from "./streamingTenant";
import { StreamingTopic } from "./streamingTopic";
import { Table } from "./table";
import { Token } from "./token";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "astra:index/accessList:AccessList":
                return new AccessList(name, <any>undefined, { urn })
            case "astra:index/cdc:Cdc":
                return new Cdc(name, <any>undefined, { urn })
            case "astra:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "astra:index/keyspace:Keyspace":
                return new Keyspace(name, <any>undefined, { urn })
            case "astra:index/privateLink:PrivateLink":
                return new PrivateLink(name, <any>undefined, { urn })
            case "astra:index/privateLinkEndpoint:PrivateLinkEndpoint":
                return new PrivateLinkEndpoint(name, <any>undefined, { urn })
            case "astra:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "astra:index/streamingSink:StreamingSink":
                return new StreamingSink(name, <any>undefined, { urn })
            case "astra:index/streamingTenant:StreamingTenant":
                return new StreamingTenant(name, <any>undefined, { urn })
            case "astra:index/streamingTopic:StreamingTopic":
                return new StreamingTopic(name, <any>undefined, { urn })
            case "astra:index/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "astra:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("astra", "index/accessList", _module)
pulumi.runtime.registerResourceModule("astra", "index/cdc", _module)
pulumi.runtime.registerResourceModule("astra", "index/database", _module)
pulumi.runtime.registerResourceModule("astra", "index/keyspace", _module)
pulumi.runtime.registerResourceModule("astra", "index/privateLink", _module)
pulumi.runtime.registerResourceModule("astra", "index/privateLinkEndpoint", _module)
pulumi.runtime.registerResourceModule("astra", "index/role", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingSink", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingTenant", _module)
pulumi.runtime.registerResourceModule("astra", "index/streamingTopic", _module)
pulumi.runtime.registerResourceModule("astra", "index/table", _module)
pulumi.runtime.registerResourceModule("astra", "index/token", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("astra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:astra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

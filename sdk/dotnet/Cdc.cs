// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Astra
{
    /// <summary>
    /// `astra.Cdc` enables cdc for an Astra Serverless table.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Astra = Pulumiverse.Astra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var streamingTenant_1 = new Astra.StreamingTenant("streamingTenant-1", new()
    ///     {
    ///         TenantName = "terraformtest",
    ///         Topic = "terraformtest",
    ///         Region = "useast-4",
    ///         CloudProvider = "gcp",
    ///         UserEmail = "seb@datastax.com",
    ///     });
    /// 
    ///     var cdc_1 = new Astra.Cdc("cdc-1", new()
    ///     {
    ///         DatabaseId = "5b70892f-e01a-4595-98e6-19ecc9985d50",
    ///         DatabaseName = "sai_test",
    ///         Table = "test",
    ///         Keyspace = "sai_test",
    ///         TopicPartitions = 3,
    ///         TenantName = streamingTenant_1.TenantName,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             streamingTenant_1,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import astra:index/cdc:Cdc example databaseId/keyspace/table/tenantName
    /// ```
    /// </summary>
    [AstraResourceType("astra:index/cdc:Cdc")]
    public partial class Cdc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Connector Status
        /// </summary>
        [Output("connectorStatus")]
        public Output<string> ConnectorStatus { get; private set; } = null!;

        /// <summary>
        /// Data topic name
        /// </summary>
        [Output("dataTopic")]
        public Output<string> DataTopic { get; private set; } = null!;

        /// <summary>
        /// Astra database to create the keyspace.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// Astra database name.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
        /// </summary>
        [Output("keyspace")]
        public Output<string> Keyspace { get; private set; } = null!;

        /// <summary>
        /// Astra database table.
        /// </summary>
        [Output("table")]
        public Output<string> Table { get; private set; } = null!;

        /// <summary>
        /// Streaming tenant name
        /// </summary>
        [Output("tenantName")]
        public Output<string> TenantName { get; private set; } = null!;

        /// <summary>
        /// Number of partitions in cdc topic.
        /// </summary>
        [Output("topicPartitions")]
        public Output<int> TopicPartitions { get; private set; } = null!;


        /// <summary>
        /// Create a Cdc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cdc(string name, CdcArgs args, CustomResourceOptions? options = null)
            : base("astra:index/cdc:Cdc", name, args ?? new CdcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cdc(string name, Input<string> id, CdcState? state = null, CustomResourceOptions? options = null)
            : base("astra:index/cdc:Cdc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cdc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cdc Get(string name, Input<string> id, CdcState? state = null, CustomResourceOptions? options = null)
        {
            return new Cdc(name, id, state, options);
        }
    }

    public sealed class CdcArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Astra database to create the keyspace.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// Astra database name.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
        /// </summary>
        [Input("keyspace", required: true)]
        public Input<string> Keyspace { get; set; } = null!;

        /// <summary>
        /// Astra database table.
        /// </summary>
        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        /// <summary>
        /// Streaming tenant name
        /// </summary>
        [Input("tenantName", required: true)]
        public Input<string> TenantName { get; set; } = null!;

        /// <summary>
        /// Number of partitions in cdc topic.
        /// </summary>
        [Input("topicPartitions", required: true)]
        public Input<int> TopicPartitions { get; set; } = null!;

        public CdcArgs()
        {
        }
        public static new CdcArgs Empty => new CdcArgs();
    }

    public sealed class CdcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connector Status
        /// </summary>
        [Input("connectorStatus")]
        public Input<string>? ConnectorStatus { get; set; }

        /// <summary>
        /// Data topic name
        /// </summary>
        [Input("dataTopic")]
        public Input<string>? DataTopic { get; set; }

        /// <summary>
        /// Astra database to create the keyspace.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// Astra database name.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
        /// </summary>
        [Input("keyspace")]
        public Input<string>? Keyspace { get; set; }

        /// <summary>
        /// Astra database table.
        /// </summary>
        [Input("table")]
        public Input<string>? Table { get; set; }

        /// <summary>
        /// Streaming tenant name
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        /// <summary>
        /// Number of partitions in cdc topic.
        /// </summary>
        [Input("topicPartitions")]
        public Input<int>? TopicPartitions { get; set; }

        public CdcState()
        {
        }
        public static new CdcState Empty => new CdcState();
    }
}

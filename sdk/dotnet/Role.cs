// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Astra
{
    /// <summary>
    /// `astra.Role` resource represents custom roles for a particular Astra Org. Custom roles can be assigned to an Astra user is to grant them granular permissions when the default roles in the UI are not specific enough. Roles are composed of policies which are granted to resources.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Astra = Pulumiverse.Astra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example role that grants policy permissions to ALL Astra DBs in an organization
    ///     var alldbsrole = new Astra.Role("alldbsrole", new()
    ///     {
    ///         RoleName = "alldbsrole",
    ///         Description = "Role that applies to all DBs in an org",
    ///         Effect = "allow",
    ///         Resources = new[]
    ///         {
    ///             "drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:*",
    ///             "drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:*:keyspace:*",
    ///             "drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:*:keyspace:*:table:*",
    ///         },
    ///         Policies = new[]
    ///         {
    ///             "org-db-view",
    ///             "db-cql",
    ///             "db-table-alter",
    ///             "db-table-create",
    ///             "db-table-describe",
    ///             "db-table-modify",
    ///             "db-table-select",
    ///             "db-keyspace-alter",
    ///             "db-keyspace-describe",
    ///             "db-keyspace-modify",
    ///             "db-keyspace-authorize",
    ///             "db-keyspace-drop",
    ///             "db-keyspace-create",
    ///             "db-keyspace-grant",
    ///         },
    ///     });
    /// 
    ///     // Example resources for a more restricted role
    ///     // A Terraform managed Astra DB resource
    ///     var exampledb = new Astra.Database("exampledb", new()
    ///     {
    ///         Keyspace = "primaryks",
    ///         CloudProvider = "gcp",
    ///         Regions = new[]
    ///         {
    ///             "us-east1",
    ///         },
    ///     });
    /// 
    ///     // Example application keyspaces
    ///     var appks1 = new Astra.Keyspace("appks1", new()
    ///     {
    ///         DatabaseId = exampledb.Id,
    ///     });
    /// 
    ///     var appks2 = new Astra.Keyspace("appks2", new()
    ///     {
    ///         DatabaseId = exampledb.Id,
    ///     });
    /// 
    ///     var appks3 = new Astra.Keyspace("appks3", new()
    ///     {
    ///         DatabaseId = exampledb.Id,
    ///     });
    /// 
    ///     // Example role that grants policy permissions to specific keyspaces within a single Astra DB
    ///     var singledbrole = new Astra.Role("singledbrole", new()
    ///     {
    ///         RoleName = "singledbrole",
    ///         Description = "Role that applies to specific keyspaces for a single Astra DB",
    ///         Effect = "allow",
    ///         Resources = new[]
    ///         {
    ///             Output.Tuple(exampledb.Id, exampledb.Keyspace).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var keyspace = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{keyspace}";
    ///             }),
    ///             Output.Tuple(exampledb.Id, exampledb.Keyspace).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var keyspace = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{keyspace}:table:*";
    ///             }),
    ///             Output.Tuple(exampledb.Id, appks1.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{name}";
    ///             }),
    ///             Output.Tuple(exampledb.Id, appks1.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{name}:table:*";
    ///             }),
    ///             Output.Tuple(exampledb.Id, appks2.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{name}";
    ///             }),
    ///             Output.Tuple(exampledb.Id, appks2.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{name}:table:*";
    ///             }),
    ///             Output.Tuple(exampledb.Id, appks3.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{name}";
    ///             }),
    ///             Output.Tuple(exampledb.Id, appks3.Name).Apply(values =&gt;
    ///             {
    ///                 var id = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:{name}:table:*";
    ///             }),
    ///             exampledb.Id.Apply(id =&gt; $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:futureks"),
    ///             exampledb.Id.Apply(id =&gt; $"drn:astra:org:f9f4b1e0-4c05-451e-9bba-d631295a7f73:db:{id}:keyspace:futureks:table:*"),
    ///         },
    ///         Policies = new[]
    ///         {
    ///             "org-db-view",
    ///             "db-cql",
    ///             "db-table-alter",
    ///             "db-table-create",
    ///             "db-table-describe",
    ///             "db-table-modify",
    ///             "db-table-select",
    ///             "db-keyspace-alter",
    ///             "db-keyspace-describe",
    ///             "db-keyspace-modify",
    ///             "db-keyspace-authorize",
    ///             "db-keyspace-drop",
    ///             "db-keyspace-create",
    ///             "db-keyspace-grant",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import astra:index/role:Role example role-id
    /// ```
    /// </summary>
    [AstraResourceType("astra:index/role:Role")]
    public partial class Role : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Role description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Role effect
        /// </summary>
        [Output("effect")]
        public Output<string> Effect { get; private set; } = null!;

        /// <summary>
        /// List of policies for the role. See https://docs.datastax.com/en/astra/docs/user-permissions.html#*operational*roles_detail for supported policies.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;

        /// <summary>
        /// Resources for which role is applicable (format is "drn:astra:org:\n\n", followed by optional resource criteria. See example usage above).
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<string>> Resources { get; private set; } = null!;

        /// <summary>
        /// Role ID, system generated
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;

        /// <summary>
        /// Role name
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;


        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs args, CustomResourceOptions? options = null)
            : base("astra:index/role:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Role(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
            : base("astra:index/role:Role", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Role resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Role Get(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
        {
            return new Role(name, id, state, options);
        }
    }

    public sealed class RoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Role description
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Role effect
        /// </summary>
        [Input("effect", required: true)]
        public Input<string> Effect { get; set; } = null!;

        [Input("policies", required: true)]
        private InputList<string>? _policies;

        /// <summary>
        /// List of policies for the role. See https://docs.datastax.com/en/astra/docs/user-permissions.html#*operational*roles_detail for supported policies.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("resources", required: true)]
        private InputList<string>? _resources;

        /// <summary>
        /// Resources for which role is applicable (format is "drn:astra:org:\n\n", followed by optional resource criteria. See example usage above).
        /// </summary>
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        /// <summary>
        /// Role name
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        public RoleArgs()
        {
        }
        public static new RoleArgs Empty => new RoleArgs();
    }

    public sealed class RoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Role description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Role effect
        /// </summary>
        [Input("effect")]
        public Input<string>? Effect { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// List of policies for the role. See https://docs.datastax.com/en/astra/docs/user-permissions.html#*operational*roles_detail for supported policies.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("resources")]
        private InputList<string>? _resources;

        /// <summary>
        /// Resources for which role is applicable (format is "drn:astra:org:\n\n", followed by optional resource criteria. See example usage above).
        /// </summary>
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        /// <summary>
        /// Role ID, system generated
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        /// <summary>
        /// Role name
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        public RoleState()
        {
        }
        public static new RoleState Empty => new RoleState();
    }
}

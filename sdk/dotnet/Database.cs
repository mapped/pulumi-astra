// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Astra
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Astra = Pulumiverse.Astra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Astra.Database("example", new()
    ///     {
    ///         CloudProvider = "gcp",
    ///         Keyspace = "keyspace",
    ///         Regions = new[]
    ///         {
    ///             "us-east1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import astra:index/database:Database example 48bfc13b-c1a5-48db-b70f-b6ef9709872b
    /// ```
    /// </summary>
    [AstraResourceType("astra:index/database:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Additional keyspaces
        /// </summary>
        [Output("additionalKeyspaces")]
        public Output<ImmutableArray<string>> AdditionalKeyspaces { get; private set; } = null!;

        /// <summary>
        /// The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        /// </summary>
        [Output("cloudProvider")]
        public Output<string> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// The cqlsh_url
        /// </summary>
        [Output("cqlshUrl")]
        public Output<string> CqlshUrl { get; private set; } = null!;

        /// <summary>
        /// The data*endpoint*url
        /// </summary>
        [Output("dataEndpointUrl")]
        public Output<string> DataEndpointUrl { get; private set; } = null!;

        /// <summary>
        /// Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
        /// </summary>
        [Output("datacenters")]
        public Output<ImmutableDictionary<string, string>> Datacenters { get; private set; } = null!;

        /// <summary>
        /// Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
        /// `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The grafana_url
        /// </summary>
        [Output("grafanaUrl")]
        public Output<string> GrafanaUrl { get; private set; } = null!;

        /// <summary>
        /// The graphql_url
        /// </summary>
        [Output("graphqlUrl")]
        public Output<string> GraphqlUrl { get; private set; } = null!;

        /// <summary>
        /// Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
        /// </summary>
        [Output("keyspace")]
        public Output<string> Keyspace { get; private set; } = null!;

        /// <summary>
        /// Astra database name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The node_count
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// The org id.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The owner id.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// The replication_factor
        /// </summary>
        [Output("replicationFactor")]
        public Output<int> ReplicationFactor { get; private set; } = null!;

        /// <summary>
        /// The status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The total_storage
        /// </summary>
        [Output("totalStorage")]
        public Output<int> TotalStorage { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("astra:index/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("astra:index/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
        /// `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
        /// </summary>
        [Input("keyspace", required: true)]
        public Input<string> Keyspace { get; set; } = null!;

        /// <summary>
        /// Astra database name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("regions", required: true)]
        private InputList<string>? _regions;

        /// <summary>
        /// Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }

    public sealed class DatabaseState : global::Pulumi.ResourceArgs
    {
        [Input("additionalKeyspaces")]
        private InputList<string>? _additionalKeyspaces;

        /// <summary>
        /// Additional keyspaces
        /// </summary>
        public InputList<string> AdditionalKeyspaces
        {
            get => _additionalKeyspaces ?? (_additionalKeyspaces = new InputList<string>());
            set => _additionalKeyspaces = value;
        }

        /// <summary>
        /// The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// The cqlsh_url
        /// </summary>
        [Input("cqlshUrl")]
        public Input<string>? CqlshUrl { get; set; }

        /// <summary>
        /// The data*endpoint*url
        /// </summary>
        [Input("dataEndpointUrl")]
        public Input<string>? DataEndpointUrl { get; set; }

        [Input("datacenters")]
        private InputMap<string>? _datacenters;

        /// <summary>
        /// Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
        /// </summary>
        public InputMap<string> Datacenters
        {
            get => _datacenters ?? (_datacenters = new InputMap<string>());
            set => _datacenters = value;
        }

        /// <summary>
        /// Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
        /// `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The grafana_url
        /// </summary>
        [Input("grafanaUrl")]
        public Input<string>? GrafanaUrl { get; set; }

        /// <summary>
        /// The graphql_url
        /// </summary>
        [Input("graphqlUrl")]
        public Input<string>? GraphqlUrl { get; set; }

        /// <summary>
        /// Initial keyspace name. For additional keyspaces, use the astra.Keyspace resource.
        /// </summary>
        [Input("keyspace")]
        public Input<string>? Keyspace { get; set; }

        /// <summary>
        /// Astra database name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The node_count
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The org id.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The owner id.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// The replication_factor
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        /// <summary>
        /// The status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The total_storage
        /// </summary>
        [Input("totalStorage")]
        public Input<int>? TotalStorage { get; set; }

        public DatabaseState()
        {
        }
        public static new DatabaseState Empty => new DatabaseState();
    }
}

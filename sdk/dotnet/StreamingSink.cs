// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Astra
{
    /// <summary>
    /// `astra.StreamingSink` creates a streaming sink which sends data from a topic to a target system.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Astra = Pulumiverse.Astra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var streamingTenant_1 = new Astra.StreamingTenant("streamingTenant-1", new()
    ///     {
    ///         TenantName = "terraformtest2",
    ///         Topic = "terraformtest",
    ///         Region = "useast-4",
    ///         CloudProvider = "gcp",
    ///         UserEmail = "seb@datastax.com",
    ///     });
    /// 
    ///     var cdc_1 = new Astra.Cdc("cdc-1", new()
    ///     {
    ///         DatabaseId = "5b70892f-e01a-4595-98e6-19ecc9985d50",
    ///         DatabaseName = "sai_test",
    ///         Table = "test",
    ///         Keyspace = "sai_test",
    ///         TopicPartitions = 3,
    ///         TenantName = streamingTenant_1.TenantName,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             streamingTenant_1,
    ///         },
    ///     });
    /// 
    ///     var streamingSink_1 = new Astra.StreamingSink("streamingSink-1", new()
    ///     {
    ///         TenantName = streamingTenant_1.TenantName,
    ///         Topic = cdc_1.DataTopic,
    ///         Region = "useast-4",
    ///         CloudProvider = "gcp",
    ///         SinkName = "jdbc-clickhouse",
    ///         RetainOrdering = true,
    ///         ProcessingGuarantees = "ATLEAST_ONCE",
    ///         Parallelism = 3,
    ///         Namespace = "default",
    ///         SinkConfigs = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["userName"] = "clickhouse",
    ///             ["password"] = "password",
    ///             ["jdbcUrl"] = "jdbc:clickhouse://fake.clickhouse.url:8123/pulsar_clickhouse_jdbc_sink",
    ///             ["tableName"] = "pulsar_clickhouse_jdbc_sink",
    ///         }),
    ///         AutoAck = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             streamingTenant_1,
    ///             cdc_1,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import astra:index/streamingSink:StreamingSink example tenant_name/topic
    /// ```
    /// </summary>
    [AstraResourceType("astra:index/streamingSink:StreamingSink")]
    public partial class StreamingSink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// auto ack
        /// </summary>
        [Output("autoAck")]
        public Output<bool> AutoAck { get; private set; } = null!;

        /// <summary>
        /// Cloud provider
        /// </summary>
        [Output("cloudProvider")]
        public Output<string> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// Whether or not to allow Terraform to destroy this streaming sink. Unless this field is set to false in Terraform state,
        /// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// Pulsar Namespace
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// Parallelism for Pulsar sink
        /// </summary>
        [Output("parallelism")]
        public Output<int> Parallelism { get; private set; } = null!;

        /// <summary>
        /// "ATLEAST*ONCE""ATMOST*ONCE""EFFECTIVELY_ONCE".
        /// </summary>
        [Output("processingGuarantees")]
        public Output<string> ProcessingGuarantees { get; private set; } = null!;

        /// <summary>
        /// cloud region
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Retain ordering.
        /// </summary>
        [Output("retainOrdering")]
        public Output<bool> RetainOrdering { get; private set; } = null!;

        /// <summary>
        /// Sink Configs
        /// </summary>
        [Output("sinkConfigs")]
        public Output<string> SinkConfigs { get; private set; } = null!;

        /// <summary>
        /// Name of the sink.
        /// </summary>
        [Output("sinkName")]
        public Output<string> SinkName { get; private set; } = null!;

        /// <summary>
        /// Streaming tenant name.
        /// </summary>
        [Output("tenantName")]
        public Output<string> TenantName { get; private set; } = null!;

        /// <summary>
        /// Streaming tenant topic.
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;


        /// <summary>
        /// Create a StreamingSink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamingSink(string name, StreamingSinkArgs args, CustomResourceOptions? options = null)
            : base("astra:index/streamingSink:StreamingSink", name, args ?? new StreamingSinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamingSink(string name, Input<string> id, StreamingSinkState? state = null, CustomResourceOptions? options = null)
            : base("astra:index/streamingSink:StreamingSink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamingSink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamingSink Get(string name, Input<string> id, StreamingSinkState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamingSink(name, id, state, options);
        }
    }

    public sealed class StreamingSinkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// auto ack
        /// </summary>
        [Input("autoAck", required: true)]
        public Input<bool> AutoAck { get; set; } = null!;

        /// <summary>
        /// Cloud provider
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// Whether or not to allow Terraform to destroy this streaming sink. Unless this field is set to false in Terraform state,
        /// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// Pulsar Namespace
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// Parallelism for Pulsar sink
        /// </summary>
        [Input("parallelism", required: true)]
        public Input<int> Parallelism { get; set; } = null!;

        /// <summary>
        /// "ATLEAST*ONCE""ATMOST*ONCE""EFFECTIVELY_ONCE".
        /// </summary>
        [Input("processingGuarantees", required: true)]
        public Input<string> ProcessingGuarantees { get; set; } = null!;

        /// <summary>
        /// cloud region
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Retain ordering.
        /// </summary>
        [Input("retainOrdering", required: true)]
        public Input<bool> RetainOrdering { get; set; } = null!;

        /// <summary>
        /// Sink Configs
        /// </summary>
        [Input("sinkConfigs", required: true)]
        public Input<string> SinkConfigs { get; set; } = null!;

        /// <summary>
        /// Name of the sink.
        /// </summary>
        [Input("sinkName", required: true)]
        public Input<string> SinkName { get; set; } = null!;

        /// <summary>
        /// Streaming tenant name.
        /// </summary>
        [Input("tenantName", required: true)]
        public Input<string> TenantName { get; set; } = null!;

        /// <summary>
        /// Streaming tenant topic.
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        public StreamingSinkArgs()
        {
        }
        public static new StreamingSinkArgs Empty => new StreamingSinkArgs();
    }

    public sealed class StreamingSinkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// auto ack
        /// </summary>
        [Input("autoAck")]
        public Input<bool>? AutoAck { get; set; }

        /// <summary>
        /// Cloud provider
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// Whether or not to allow Terraform to destroy this streaming sink. Unless this field is set to false in Terraform state,
        /// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// Pulsar Namespace
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Parallelism for Pulsar sink
        /// </summary>
        [Input("parallelism")]
        public Input<int>? Parallelism { get; set; }

        /// <summary>
        /// "ATLEAST*ONCE""ATMOST*ONCE""EFFECTIVELY_ONCE".
        /// </summary>
        [Input("processingGuarantees")]
        public Input<string>? ProcessingGuarantees { get; set; }

        /// <summary>
        /// cloud region
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Retain ordering.
        /// </summary>
        [Input("retainOrdering")]
        public Input<bool>? RetainOrdering { get; set; }

        /// <summary>
        /// Sink Configs
        /// </summary>
        [Input("sinkConfigs")]
        public Input<string>? SinkConfigs { get; set; }

        /// <summary>
        /// Name of the sink.
        /// </summary>
        [Input("sinkName")]
        public Input<string>? SinkName { get; set; }

        /// <summary>
        /// Streaming tenant name.
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        /// <summary>
        /// Streaming tenant topic.
        /// </summary>
        [Input("topic")]
        public Input<string>? Topic { get; set; }

        public StreamingSinkState()
        {
        }
        public static new StreamingSinkState Empty => new StreamingSinkState();
    }
}

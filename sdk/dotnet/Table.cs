// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Astra
{
    /// <summary>
    /// `astra.Table` provides a table resource which represents a table in cassandra.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Astra = Pulumiverse.Astra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dev = new Astra.Database("dev", new()
    ///     {
    ///         Keyspace = "puppies",
    ///         CloudProvider = "gcp",
    ///         Regions = new[]
    ///         {
    ///             "us-east1",
    ///         },
    ///     });
    /// 
    ///     var table_1 = new Astra.Table("table-1", new()
    ///     {
    ///         AstraTable = "mytable",
    ///         Keyspace = "puppies",
    ///         DatabaseId = dev.Id,
    ///         Region = "us-east1",
    ///         ClusteringColumns = "a:b",
    ///         PartitionKeys = "c:d",
    ///         ColumnDefinitions = new[]
    ///         {
    ///             
    ///             {
    ///                 { "Name", "a" },
    ///                 { "Static", "false" },
    ///                 { "TypeDefinition", "text" },
    ///             },
    ///             
    ///             {
    ///                 { "Name", "b" },
    ///                 { "Static", "false" },
    ///                 { "TypeDefinition", "text" },
    ///             },
    ///             
    ///             {
    ///                 { "Name", "c" },
    ///                 { "Static", "false" },
    ///                 { "TypeDefinition", "text" },
    ///             },
    ///             
    ///             {
    ///                 { "Name", "d" },
    ///                 { "Static", "false" },
    ///                 { "TypeDefinition", "text" },
    ///             },
    ///             
    ///             {
    ///                 { "Name", "e" },
    ///                 { "Static", "false" },
    ///                 { "TypeDefinition", "text" },
    ///             },
    ///             
    ///             {
    ///                 { "Name", "f" },
    ///                 { "Static", "false" },
    ///                 { "TypeDefinition", "text" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// # the import id includes the database_id, keyspace name, and table name.
    /// 
    /// ```sh
    ///  $ pulumi import astra:index/table:Table example 48bfc13b-c1a5-48db-b70f-b6ef9709872b/kayspacename/tablename
    /// ```
    /// </summary>
    [AstraResourceType("astra:index/table:Table")]
    public partial class Table : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Clustering column(s), separated by :
        /// </summary>
        [Output("clusteringColumns")]
        public Output<string> ClusteringColumns { get; private set; } = null!;

        /// <summary>
        /// A list of table Definitions
        /// </summary>
        [Output("columnDefinitions")]
        public Output<ImmutableArray<ImmutableDictionary<string, string>>> ColumnDefinitions { get; private set; } = null!;

        /// <summary>
        /// Astra database to create the keyspace.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        /// </summary>
        [Output("keyspace")]
        public Output<string> Keyspace { get; private set; } = null!;

        /// <summary>
        /// Partition key(s), separated by :
        /// </summary>
        [Output("partitionKeys")]
        public Output<string> PartitionKeys { get; private set; } = null!;

        /// <summary>
        /// region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        /// </summary>
        [Output("table")]
        public Output<string> AstraTable { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("astra:index/table:Table", name, args ?? new TableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
            : base("astra:index/table:Table", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
        {
            return new Table(name, id, state, options);
        }
    }

    public sealed class TableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Clustering column(s), separated by :
        /// </summary>
        [Input("clusteringColumns", required: true)]
        public Input<string> ClusteringColumns { get; set; } = null!;

        [Input("columnDefinitions", required: true)]
        private InputList<ImmutableDictionary<string, string>>? _columnDefinitions;

        /// <summary>
        /// A list of table Definitions
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> ColumnDefinitions
        {
            get => _columnDefinitions ?? (_columnDefinitions = new InputList<ImmutableDictionary<string, string>>());
            set => _columnDefinitions = value;
        }

        /// <summary>
        /// Astra database to create the keyspace.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        /// </summary>
        [Input("keyspace", required: true)]
        public Input<string> Keyspace { get; set; } = null!;

        /// <summary>
        /// Partition key(s), separated by :
        /// </summary>
        [Input("partitionKeys", required: true)]
        public Input<string> PartitionKeys { get; set; } = null!;

        /// <summary>
        /// region.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        /// </summary>
        [Input("table", required: true)]
        public Input<string> AstraTable { get; set; } = null!;

        public TableArgs()
        {
        }
        public static new TableArgs Empty => new TableArgs();
    }

    public sealed class TableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Clustering column(s), separated by :
        /// </summary>
        [Input("clusteringColumns")]
        public Input<string>? ClusteringColumns { get; set; }

        [Input("columnDefinitions")]
        private InputList<ImmutableDictionary<string, string>>? _columnDefinitions;

        /// <summary>
        /// A list of table Definitions
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> ColumnDefinitions
        {
            get => _columnDefinitions ?? (_columnDefinitions = new InputList<ImmutableDictionary<string, string>>());
            set => _columnDefinitions = value;
        }

        /// <summary>
        /// Astra database to create the keyspace.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        /// </summary>
        [Input("keyspace")]
        public Input<string>? Keyspace { get; set; }

        /// <summary>
        /// Partition key(s), separated by :
        /// </summary>
        [Input("partitionKeys")]
        public Input<string>? PartitionKeys { get; set; }

        /// <summary>
        /// region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        /// </summary>
        [Input("table")]
        public Input<string>? AstraTable { get; set; }

        public TableState()
        {
        }
        public static new TableState Empty => new TableState();
    }
}

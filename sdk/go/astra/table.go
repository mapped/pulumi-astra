// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Table` provides a table resource which represents a table in cassandra.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-astra/sdk/go/astra"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		dev, err := astra.NewDatabase(ctx, "dev", &astra.DatabaseArgs{
// 			Keyspace:      pulumi.String("puppies"),
// 			CloudProvider: pulumi.String("gcp"),
// 			Regions: pulumi.StringArray{
// 				pulumi.String("us-east1"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = astra.NewTable(ctx, "table-1", &astra.TableArgs{
// 			Table:             pulumi.String("mytable"),
// 			Keyspace:          pulumi.String("puppies"),
// 			DatabaseId:        dev.ID(),
// 			Region:            pulumi.String("us-east1"),
// 			ClusteringColumns: pulumi.String("a:b"),
// 			PartitionKeys:     pulumi.String("c:d"),
// 			ColumnDefinitions: pulumi.StringMapArray{
// 				pulumi.StringMap{
// 					"Name":           pulumi.String("a"),
// 					"Static":         pulumi.String("false"),
// 					"TypeDefinition": pulumi.String("text"),
// 				},
// 				pulumi.StringMap{
// 					"Name":           pulumi.String("b"),
// 					"Static":         pulumi.String("false"),
// 					"TypeDefinition": pulumi.String("text"),
// 				},
// 				pulumi.StringMap{
// 					"Name":           pulumi.String("c"),
// 					"Static":         pulumi.String("false"),
// 					"TypeDefinition": pulumi.String("text"),
// 				},
// 				pulumi.StringMap{
// 					"Name":           pulumi.String("d"),
// 					"Static":         pulumi.String("false"),
// 					"TypeDefinition": pulumi.String("text"),
// 				},
// 				pulumi.StringMap{
// 					"Name":           pulumi.String("e"),
// 					"Static":         pulumi.String("false"),
// 					"TypeDefinition": pulumi.String("text"),
// 				},
// 				pulumi.StringMap{
// 					"Name":           pulumi.String("f"),
// 					"Static":         pulumi.String("false"),
// 					"TypeDefinition": pulumi.String("text"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// # the import id includes the database_id, keyspace name, and table name.
//
// ```sh
//  $ pulumi import astra:index/table:Table example 48bfc13b-c1a5-48db-b70f-b6ef9709872b/kayspacename/tablename
// ```
type Table struct {
	pulumi.CustomResourceState

	// Clustering column(s), separated by :
	ClusteringColumns pulumi.StringOutput `pulumi:"clusteringColumns"`
	// A list of table Definitions
	ColumnDefinitions pulumi.StringMapArrayOutput `pulumi:"columnDefinitions"`
	// Astra database to create the keyspace.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Keyspace pulumi.StringOutput `pulumi:"keyspace"`
	// Partition key(s), separated by :
	PartitionKeys pulumi.StringOutput `pulumi:"partitionKeys"`
	// region.
	Region pulumi.StringOutput `pulumi:"region"`
	// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Table pulumi.StringOutput `pulumi:"table"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusteringColumns == nil {
		return nil, errors.New("invalid value for required argument 'ClusteringColumns'")
	}
	if args.ColumnDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'ColumnDefinitions'")
	}
	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Keyspace == nil {
		return nil, errors.New("invalid value for required argument 'Keyspace'")
	}
	if args.PartitionKeys == nil {
		return nil, errors.New("invalid value for required argument 'PartitionKeys'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("astra:index/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("astra:index/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	// Clustering column(s), separated by :
	ClusteringColumns *string `pulumi:"clusteringColumns"`
	// A list of table Definitions
	ColumnDefinitions []map[string]string `pulumi:"columnDefinitions"`
	// Astra database to create the keyspace.
	DatabaseId *string `pulumi:"databaseId"`
	// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Keyspace *string `pulumi:"keyspace"`
	// Partition key(s), separated by :
	PartitionKeys *string `pulumi:"partitionKeys"`
	// region.
	Region *string `pulumi:"region"`
	// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Table *string `pulumi:"table"`
}

type TableState struct {
	// Clustering column(s), separated by :
	ClusteringColumns pulumi.StringPtrInput
	// A list of table Definitions
	ColumnDefinitions pulumi.StringMapArrayInput
	// Astra database to create the keyspace.
	DatabaseId pulumi.StringPtrInput
	// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Keyspace pulumi.StringPtrInput
	// Partition key(s), separated by :
	PartitionKeys pulumi.StringPtrInput
	// region.
	Region pulumi.StringPtrInput
	// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Table pulumi.StringPtrInput
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Clustering column(s), separated by :
	ClusteringColumns string `pulumi:"clusteringColumns"`
	// A list of table Definitions
	ColumnDefinitions []map[string]string `pulumi:"columnDefinitions"`
	// Astra database to create the keyspace.
	DatabaseId string `pulumi:"databaseId"`
	// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Keyspace string `pulumi:"keyspace"`
	// Partition key(s), separated by :
	PartitionKeys string `pulumi:"partitionKeys"`
	// region.
	Region string `pulumi:"region"`
	// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Table string `pulumi:"table"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Clustering column(s), separated by :
	ClusteringColumns pulumi.StringInput
	// A list of table Definitions
	ColumnDefinitions pulumi.StringMapArrayInput
	// Astra database to create the keyspace.
	DatabaseId pulumi.StringInput
	// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Keyspace pulumi.StringInput
	// Partition key(s), separated by :
	PartitionKeys pulumi.StringInput
	// region.
	Region pulumi.StringInput
	// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
	Table pulumi.StringInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

// TableArrayInput is an input type that accepts TableArray and TableArrayOutput values.
// You can construct a concrete instance of `TableArrayInput` via:
//
//          TableArray{ TableArgs{...} }
type TableArrayInput interface {
	pulumi.Input

	ToTableArrayOutput() TableArrayOutput
	ToTableArrayOutputWithContext(context.Context) TableArrayOutput
}

type TableArray []TableInput

func (TableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (i TableArray) ToTableArrayOutput() TableArrayOutput {
	return i.ToTableArrayOutputWithContext(context.Background())
}

func (i TableArray) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableArrayOutput)
}

// TableMapInput is an input type that accepts TableMap and TableMapOutput values.
// You can construct a concrete instance of `TableMapInput` via:
//
//          TableMap{ "key": TableArgs{...} }
type TableMapInput interface {
	pulumi.Input

	ToTableMapOutput() TableMapOutput
	ToTableMapOutputWithContext(context.Context) TableMapOutput
}

type TableMap map[string]TableInput

func (TableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (i TableMap) ToTableMapOutput() TableMapOutput {
	return i.ToTableMapOutputWithContext(context.Background())
}

func (i TableMap) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMapOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// Clustering column(s), separated by :
func (o TableOutput) ClusteringColumns() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.ClusteringColumns }).(pulumi.StringOutput)
}

// A list of table Definitions
func (o TableOutput) ColumnDefinitions() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapArrayOutput { return v.ColumnDefinitions }).(pulumi.StringMapArrayOutput)
}

// Astra database to create the keyspace.
func (o TableOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
func (o TableOutput) Keyspace() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Keyspace }).(pulumi.StringOutput)
}

// Partition key(s), separated by :
func (o TableOutput) PartitionKeys() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.PartitionKeys }).(pulumi.StringOutput)
}

// region.
func (o TableOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
func (o TableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

type TableArrayOutput struct{ *pulumi.OutputState }

func (TableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (o TableArrayOutput) ToTableArrayOutput() TableArrayOutput {
	return o
}

func (o TableArrayOutput) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return o
}

func (o TableArrayOutput) Index(i pulumi.IntInput) TableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Table {
		return vs[0].([]*Table)[vs[1].(int)]
	}).(TableOutput)
}

type TableMapOutput struct{ *pulumi.OutputState }

func (TableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (o TableMapOutput) ToTableMapOutput() TableMapOutput {
	return o
}

func (o TableMapOutput) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return o
}

func (o TableMapOutput) MapIndex(k pulumi.StringInput) TableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Table {
		return vs[0].(map[string]*Table)[vs[1].(string)]
	}).(TableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableArrayInput)(nil)).Elem(), TableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMapInput)(nil)).Elem(), TableMap{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TableArrayOutput{})
	pulumi.RegisterOutputType(TableMapOutput{})
}

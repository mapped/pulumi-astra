// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getKeyspaces` provides a datasource that lists the keyspaces in an Astra database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-astra/sdk/go/astra"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-astra/sdk/go/astra"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := astra.LookupKeyspaces(ctx, &GetKeyspacesArgs{
// 			DatabaseId: "f9f4b1e0-4c05-451e-9bba-d631295a7f73",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupKeyspaces(ctx *pulumi.Context, args *LookupKeyspacesArgs, opts ...pulumi.InvokeOption) (*LookupKeyspacesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupKeyspacesResult
	err := ctx.Invoke("astra:index/getKeyspaces:getKeyspaces", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyspaces.
type LookupKeyspacesArgs struct {
	// The ID of the Astra database.
	DatabaseId string `pulumi:"databaseId"`
}

// A collection of values returned by getKeyspaces.
type LookupKeyspacesResult struct {
	// The ID of the Astra database.
	DatabaseId string `pulumi:"databaseId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of keyspaces that match the search criteria.
	Results []GetKeyspacesResult `pulumi:"results"`
}

func LookupKeyspacesOutput(ctx *pulumi.Context, args LookupKeyspacesOutputArgs, opts ...pulumi.InvokeOption) LookupKeyspacesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKeyspacesResult, error) {
			args := v.(LookupKeyspacesArgs)
			r, err := LookupKeyspaces(ctx, &args, opts...)
			var s LookupKeyspacesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKeyspacesResultOutput)
}

// A collection of arguments for invoking getKeyspaces.
type LookupKeyspacesOutputArgs struct {
	// The ID of the Astra database.
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
}

func (LookupKeyspacesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyspacesArgs)(nil)).Elem()
}

// A collection of values returned by getKeyspaces.
type LookupKeyspacesResultOutput struct{ *pulumi.OutputState }

func (LookupKeyspacesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyspacesResult)(nil)).Elem()
}

func (o LookupKeyspacesResultOutput) ToLookupKeyspacesResultOutput() LookupKeyspacesResultOutput {
	return o
}

func (o LookupKeyspacesResultOutput) ToLookupKeyspacesResultOutputWithContext(ctx context.Context) LookupKeyspacesResultOutput {
	return o
}

// The ID of the Astra database.
func (o LookupKeyspacesResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyspacesResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKeyspacesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyspacesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of keyspaces that match the search criteria.
func (o LookupKeyspacesResultOutput) Results() GetKeyspacesResultArrayOutput {
	return o.ApplyT(func(v LookupKeyspacesResult) []GetKeyspacesResult { return v.Results }).(GetKeyspacesResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyspacesResultOutput{})
}

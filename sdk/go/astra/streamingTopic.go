// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `StreamingTopic` creates an Astra Streaming topic.
type StreamingTopic struct {
	pulumi.CustomResourceState

	// Cloud provider
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// Whether or not to allow Terraform to destroy this streaming topic. Unless this field is set to false in Terraform state,
	// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// Pulsar Namespace
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// cloud region
	Region pulumi.StringOutput `pulumi:"region"`
	// Streaming tenant name.
	TenantName pulumi.StringOutput `pulumi:"tenantName"`
	// Streaming tenant topic.
	Topic pulumi.StringOutput `pulumi:"topic"`
}

// NewStreamingTopic registers a new resource with the given unique name, arguments, and options.
func NewStreamingTopic(ctx *pulumi.Context,
	name string, args *StreamingTopicArgs, opts ...pulumi.ResourceOption) (*StreamingTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.TenantName == nil {
		return nil, errors.New("invalid value for required argument 'TenantName'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StreamingTopic
	err := ctx.RegisterResource("astra:index/streamingTopic:StreamingTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingTopic gets an existing StreamingTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingTopicState, opts ...pulumi.ResourceOption) (*StreamingTopic, error) {
	var resource StreamingTopic
	err := ctx.ReadResource("astra:index/streamingTopic:StreamingTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingTopic resources.
type streamingTopicState struct {
	// Cloud provider
	CloudProvider *string `pulumi:"cloudProvider"`
	// Whether or not to allow Terraform to destroy this streaming topic. Unless this field is set to false in Terraform state,
	// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Pulsar Namespace
	Namespace *string `pulumi:"namespace"`
	// cloud region
	Region *string `pulumi:"region"`
	// Streaming tenant name.
	TenantName *string `pulumi:"tenantName"`
	// Streaming tenant topic.
	Topic *string `pulumi:"topic"`
}

type StreamingTopicState struct {
	// Cloud provider
	CloudProvider pulumi.StringPtrInput
	// Whether or not to allow Terraform to destroy this streaming topic. Unless this field is set to false in Terraform state,
	// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
	DeletionProtection pulumi.BoolPtrInput
	// Pulsar Namespace
	Namespace pulumi.StringPtrInput
	// cloud region
	Region pulumi.StringPtrInput
	// Streaming tenant name.
	TenantName pulumi.StringPtrInput
	// Streaming tenant topic.
	Topic pulumi.StringPtrInput
}

func (StreamingTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingTopicState)(nil)).Elem()
}

type streamingTopicArgs struct {
	// Cloud provider
	CloudProvider string `pulumi:"cloudProvider"`
	// Whether or not to allow Terraform to destroy this streaming topic. Unless this field is set to false in Terraform state,
	// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Pulsar Namespace
	Namespace string `pulumi:"namespace"`
	// cloud region
	Region string `pulumi:"region"`
	// Streaming tenant name.
	TenantName string `pulumi:"tenantName"`
	// Streaming tenant topic.
	Topic string `pulumi:"topic"`
}

// The set of arguments for constructing a StreamingTopic resource.
type StreamingTopicArgs struct {
	// Cloud provider
	CloudProvider pulumi.StringInput
	// Whether or not to allow Terraform to destroy this streaming topic. Unless this field is set to false in Terraform state,
	// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
	DeletionProtection pulumi.BoolPtrInput
	// Pulsar Namespace
	Namespace pulumi.StringInput
	// cloud region
	Region pulumi.StringInput
	// Streaming tenant name.
	TenantName pulumi.StringInput
	// Streaming tenant topic.
	Topic pulumi.StringInput
}

func (StreamingTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingTopicArgs)(nil)).Elem()
}

type StreamingTopicInput interface {
	pulumi.Input

	ToStreamingTopicOutput() StreamingTopicOutput
	ToStreamingTopicOutputWithContext(ctx context.Context) StreamingTopicOutput
}

func (*StreamingTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingTopic)(nil)).Elem()
}

func (i *StreamingTopic) ToStreamingTopicOutput() StreamingTopicOutput {
	return i.ToStreamingTopicOutputWithContext(context.Background())
}

func (i *StreamingTopic) ToStreamingTopicOutputWithContext(ctx context.Context) StreamingTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingTopicOutput)
}

// StreamingTopicArrayInput is an input type that accepts StreamingTopicArray and StreamingTopicArrayOutput values.
// You can construct a concrete instance of `StreamingTopicArrayInput` via:
//
//          StreamingTopicArray{ StreamingTopicArgs{...} }
type StreamingTopicArrayInput interface {
	pulumi.Input

	ToStreamingTopicArrayOutput() StreamingTopicArrayOutput
	ToStreamingTopicArrayOutputWithContext(context.Context) StreamingTopicArrayOutput
}

type StreamingTopicArray []StreamingTopicInput

func (StreamingTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingTopic)(nil)).Elem()
}

func (i StreamingTopicArray) ToStreamingTopicArrayOutput() StreamingTopicArrayOutput {
	return i.ToStreamingTopicArrayOutputWithContext(context.Background())
}

func (i StreamingTopicArray) ToStreamingTopicArrayOutputWithContext(ctx context.Context) StreamingTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingTopicArrayOutput)
}

// StreamingTopicMapInput is an input type that accepts StreamingTopicMap and StreamingTopicMapOutput values.
// You can construct a concrete instance of `StreamingTopicMapInput` via:
//
//          StreamingTopicMap{ "key": StreamingTopicArgs{...} }
type StreamingTopicMapInput interface {
	pulumi.Input

	ToStreamingTopicMapOutput() StreamingTopicMapOutput
	ToStreamingTopicMapOutputWithContext(context.Context) StreamingTopicMapOutput
}

type StreamingTopicMap map[string]StreamingTopicInput

func (StreamingTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingTopic)(nil)).Elem()
}

func (i StreamingTopicMap) ToStreamingTopicMapOutput() StreamingTopicMapOutput {
	return i.ToStreamingTopicMapOutputWithContext(context.Background())
}

func (i StreamingTopicMap) ToStreamingTopicMapOutputWithContext(ctx context.Context) StreamingTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingTopicMapOutput)
}

type StreamingTopicOutput struct{ *pulumi.OutputState }

func (StreamingTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingTopic)(nil)).Elem()
}

func (o StreamingTopicOutput) ToStreamingTopicOutput() StreamingTopicOutput {
	return o
}

func (o StreamingTopicOutput) ToStreamingTopicOutputWithContext(ctx context.Context) StreamingTopicOutput {
	return o
}

// Cloud provider
func (o StreamingTopicOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingTopic) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// Whether or not to allow Terraform to destroy this streaming topic. Unless this field is set to false in Terraform state,
// a `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
func (o StreamingTopicOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingTopic) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// Pulsar Namespace
func (o StreamingTopicOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingTopic) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// cloud region
func (o StreamingTopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingTopic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Streaming tenant name.
func (o StreamingTopicOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingTopic) pulumi.StringOutput { return v.TenantName }).(pulumi.StringOutput)
}

// Streaming tenant topic.
func (o StreamingTopicOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingTopic) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

type StreamingTopicArrayOutput struct{ *pulumi.OutputState }

func (StreamingTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingTopic)(nil)).Elem()
}

func (o StreamingTopicArrayOutput) ToStreamingTopicArrayOutput() StreamingTopicArrayOutput {
	return o
}

func (o StreamingTopicArrayOutput) ToStreamingTopicArrayOutputWithContext(ctx context.Context) StreamingTopicArrayOutput {
	return o
}

func (o StreamingTopicArrayOutput) Index(i pulumi.IntInput) StreamingTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamingTopic {
		return vs[0].([]*StreamingTopic)[vs[1].(int)]
	}).(StreamingTopicOutput)
}

type StreamingTopicMapOutput struct{ *pulumi.OutputState }

func (StreamingTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingTopic)(nil)).Elem()
}

func (o StreamingTopicMapOutput) ToStreamingTopicMapOutput() StreamingTopicMapOutput {
	return o
}

func (o StreamingTopicMapOutput) ToStreamingTopicMapOutputWithContext(ctx context.Context) StreamingTopicMapOutput {
	return o
}

func (o StreamingTopicMapOutput) MapIndex(k pulumi.StringInput) StreamingTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamingTopic {
		return vs[0].(map[string]*StreamingTopic)[vs[1].(string)]
	}).(StreamingTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingTopicInput)(nil)).Elem(), &StreamingTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingTopicArrayInput)(nil)).Elem(), StreamingTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingTopicMapInput)(nil)).Elem(), StreamingTopicMap{})
	pulumi.RegisterOutputType(StreamingTopicOutput{})
	pulumi.RegisterOutputType(StreamingTopicArrayOutput{})
	pulumi.RegisterOutputType(StreamingTopicMapOutput{})
}

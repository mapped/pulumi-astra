// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package astra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `Cdc` enables cdc for an Astra Serverless table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-astra/sdk/go/astra"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := astra.NewStreamingTenant(ctx, "streamingTenant-1", &astra.StreamingTenantArgs{
// 			TenantName:    pulumi.String("terraformtest"),
// 			Topic:         pulumi.String("terraformtest"),
// 			Region:        pulumi.String("useast-4"),
// 			CloudProvider: pulumi.String("gcp"),
// 			UserEmail:     pulumi.String("seb@datastax.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = astra.NewCdc(ctx, "cdc-1", &astra.CdcArgs{
// 			DatabaseId:      pulumi.String("5b70892f-e01a-4595-98e6-19ecc9985d50"),
// 			DatabaseName:    pulumi.String("sai_test"),
// 			Table:           pulumi.String("test"),
// 			Keyspace:        pulumi.String("sai_test"),
// 			TopicPartitions: pulumi.Int(3),
// 			TenantName:      streamingTenant_1.TenantName,
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			streamingTenant_1,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import astra:index/cdc:Cdc example databaseId/keyspace/table/tenantName
// ```
type Cdc struct {
	pulumi.CustomResourceState

	// Connector Status
	ConnectorStatus pulumi.StringOutput `pulumi:"connectorStatus"`
	// Data topic name
	DataTopic pulumi.StringOutput `pulumi:"dataTopic"`
	// Astra database to create the keyspace.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// Astra database name.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Initial keyspace name. For additional keyspaces, use the Keyspace resource.
	Keyspace pulumi.StringOutput `pulumi:"keyspace"`
	// Astra database table.
	Table pulumi.StringOutput `pulumi:"table"`
	// Streaming tenant name
	TenantName pulumi.StringOutput `pulumi:"tenantName"`
	// Number of partitions in cdc topic.
	TopicPartitions pulumi.IntOutput `pulumi:"topicPartitions"`
}

// NewCdc registers a new resource with the given unique name, arguments, and options.
func NewCdc(ctx *pulumi.Context,
	name string, args *CdcArgs, opts ...pulumi.ResourceOption) (*Cdc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Keyspace == nil {
		return nil, errors.New("invalid value for required argument 'Keyspace'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	if args.TenantName == nil {
		return nil, errors.New("invalid value for required argument 'TenantName'")
	}
	if args.TopicPartitions == nil {
		return nil, errors.New("invalid value for required argument 'TopicPartitions'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Cdc
	err := ctx.RegisterResource("astra:index/cdc:Cdc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdc gets an existing Cdc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdcState, opts ...pulumi.ResourceOption) (*Cdc, error) {
	var resource Cdc
	err := ctx.ReadResource("astra:index/cdc:Cdc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cdc resources.
type cdcState struct {
	// Connector Status
	ConnectorStatus *string `pulumi:"connectorStatus"`
	// Data topic name
	DataTopic *string `pulumi:"dataTopic"`
	// Astra database to create the keyspace.
	DatabaseId *string `pulumi:"databaseId"`
	// Astra database name.
	DatabaseName *string `pulumi:"databaseName"`
	// Initial keyspace name. For additional keyspaces, use the Keyspace resource.
	Keyspace *string `pulumi:"keyspace"`
	// Astra database table.
	Table *string `pulumi:"table"`
	// Streaming tenant name
	TenantName *string `pulumi:"tenantName"`
	// Number of partitions in cdc topic.
	TopicPartitions *int `pulumi:"topicPartitions"`
}

type CdcState struct {
	// Connector Status
	ConnectorStatus pulumi.StringPtrInput
	// Data topic name
	DataTopic pulumi.StringPtrInput
	// Astra database to create the keyspace.
	DatabaseId pulumi.StringPtrInput
	// Astra database name.
	DatabaseName pulumi.StringPtrInput
	// Initial keyspace name. For additional keyspaces, use the Keyspace resource.
	Keyspace pulumi.StringPtrInput
	// Astra database table.
	Table pulumi.StringPtrInput
	// Streaming tenant name
	TenantName pulumi.StringPtrInput
	// Number of partitions in cdc topic.
	TopicPartitions pulumi.IntPtrInput
}

func (CdcState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdcState)(nil)).Elem()
}

type cdcArgs struct {
	// Astra database to create the keyspace.
	DatabaseId string `pulumi:"databaseId"`
	// Astra database name.
	DatabaseName string `pulumi:"databaseName"`
	// Initial keyspace name. For additional keyspaces, use the Keyspace resource.
	Keyspace string `pulumi:"keyspace"`
	// Astra database table.
	Table string `pulumi:"table"`
	// Streaming tenant name
	TenantName string `pulumi:"tenantName"`
	// Number of partitions in cdc topic.
	TopicPartitions int `pulumi:"topicPartitions"`
}

// The set of arguments for constructing a Cdc resource.
type CdcArgs struct {
	// Astra database to create the keyspace.
	DatabaseId pulumi.StringInput
	// Astra database name.
	DatabaseName pulumi.StringInput
	// Initial keyspace name. For additional keyspaces, use the Keyspace resource.
	Keyspace pulumi.StringInput
	// Astra database table.
	Table pulumi.StringInput
	// Streaming tenant name
	TenantName pulumi.StringInput
	// Number of partitions in cdc topic.
	TopicPartitions pulumi.IntInput
}

func (CdcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdcArgs)(nil)).Elem()
}

type CdcInput interface {
	pulumi.Input

	ToCdcOutput() CdcOutput
	ToCdcOutputWithContext(ctx context.Context) CdcOutput
}

func (*Cdc) ElementType() reflect.Type {
	return reflect.TypeOf((**Cdc)(nil)).Elem()
}

func (i *Cdc) ToCdcOutput() CdcOutput {
	return i.ToCdcOutputWithContext(context.Background())
}

func (i *Cdc) ToCdcOutputWithContext(ctx context.Context) CdcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdcOutput)
}

// CdcArrayInput is an input type that accepts CdcArray and CdcArrayOutput values.
// You can construct a concrete instance of `CdcArrayInput` via:
//
//          CdcArray{ CdcArgs{...} }
type CdcArrayInput interface {
	pulumi.Input

	ToCdcArrayOutput() CdcArrayOutput
	ToCdcArrayOutputWithContext(context.Context) CdcArrayOutput
}

type CdcArray []CdcInput

func (CdcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cdc)(nil)).Elem()
}

func (i CdcArray) ToCdcArrayOutput() CdcArrayOutput {
	return i.ToCdcArrayOutputWithContext(context.Background())
}

func (i CdcArray) ToCdcArrayOutputWithContext(ctx context.Context) CdcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdcArrayOutput)
}

// CdcMapInput is an input type that accepts CdcMap and CdcMapOutput values.
// You can construct a concrete instance of `CdcMapInput` via:
//
//          CdcMap{ "key": CdcArgs{...} }
type CdcMapInput interface {
	pulumi.Input

	ToCdcMapOutput() CdcMapOutput
	ToCdcMapOutputWithContext(context.Context) CdcMapOutput
}

type CdcMap map[string]CdcInput

func (CdcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cdc)(nil)).Elem()
}

func (i CdcMap) ToCdcMapOutput() CdcMapOutput {
	return i.ToCdcMapOutputWithContext(context.Background())
}

func (i CdcMap) ToCdcMapOutputWithContext(ctx context.Context) CdcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdcMapOutput)
}

type CdcOutput struct{ *pulumi.OutputState }

func (CdcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cdc)(nil)).Elem()
}

func (o CdcOutput) ToCdcOutput() CdcOutput {
	return o
}

func (o CdcOutput) ToCdcOutputWithContext(ctx context.Context) CdcOutput {
	return o
}

// Connector Status
func (o CdcOutput) ConnectorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdc) pulumi.StringOutput { return v.ConnectorStatus }).(pulumi.StringOutput)
}

// Data topic name
func (o CdcOutput) DataTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdc) pulumi.StringOutput { return v.DataTopic }).(pulumi.StringOutput)
}

// Astra database to create the keyspace.
func (o CdcOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdc) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// Astra database name.
func (o CdcOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdc) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Initial keyspace name. For additional keyspaces, use the Keyspace resource.
func (o CdcOutput) Keyspace() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdc) pulumi.StringOutput { return v.Keyspace }).(pulumi.StringOutput)
}

// Astra database table.
func (o CdcOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdc) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

// Streaming tenant name
func (o CdcOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdc) pulumi.StringOutput { return v.TenantName }).(pulumi.StringOutput)
}

// Number of partitions in cdc topic.
func (o CdcOutput) TopicPartitions() pulumi.IntOutput {
	return o.ApplyT(func(v *Cdc) pulumi.IntOutput { return v.TopicPartitions }).(pulumi.IntOutput)
}

type CdcArrayOutput struct{ *pulumi.OutputState }

func (CdcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cdc)(nil)).Elem()
}

func (o CdcArrayOutput) ToCdcArrayOutput() CdcArrayOutput {
	return o
}

func (o CdcArrayOutput) ToCdcArrayOutputWithContext(ctx context.Context) CdcArrayOutput {
	return o
}

func (o CdcArrayOutput) Index(i pulumi.IntInput) CdcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cdc {
		return vs[0].([]*Cdc)[vs[1].(int)]
	}).(CdcOutput)
}

type CdcMapOutput struct{ *pulumi.OutputState }

func (CdcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cdc)(nil)).Elem()
}

func (o CdcMapOutput) ToCdcMapOutput() CdcMapOutput {
	return o
}

func (o CdcMapOutput) ToCdcMapOutputWithContext(ctx context.Context) CdcMapOutput {
	return o
}

func (o CdcMapOutput) MapIndex(k pulumi.StringInput) CdcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cdc {
		return vs[0].(map[string]*Cdc)[vs[1].(string)]
	}).(CdcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdcInput)(nil)).Elem(), &Cdc{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdcArrayInput)(nil)).Elem(), CdcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdcMapInput)(nil)).Elem(), CdcMap{})
	pulumi.RegisterOutputType(CdcOutput{})
	pulumi.RegisterOutputType(CdcArrayOutput{})
	pulumi.RegisterOutputType(CdcMapOutput{})
}
